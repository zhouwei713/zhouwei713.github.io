<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luobodazahui</title>
  
  <subtitle>周萝卜的分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.luobodazahui.top/"/>
  <updated>2019-07-31T09:51:49.126Z</updated>
  <id>https://blog.luobodazahui.top/</id>
  
  <author>
    <name>Luobo Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于矩阵分解算法的推荐系统实战</title>
    <link href="https://blog.luobodazahui.top/2019/07/30/%E5%9F%BA%E4%BA%8E%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3%E7%AE%97%E6%B3%95%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/"/>
    <id>https://blog.luobodazahui.top/2019/07/30/基于矩阵分解算法的推荐系统实战/</id>
    <published>2019-07-30T13:05:52.000Z</published>
    <updated>2019-07-31T09:51:49.126Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/07/30/基于矩阵分解算法的推荐系统实战/jiqixuexi.jpg"></p><p>基于矩阵分解算法的图书推荐系统实战</p><h1>推荐系统</h1><p>推荐系统，可以根据用户的喜好来推荐给用户不同的事物。</p><p>推荐系统类型：</p><ol><li>纯手工设置推荐内容</li><li>根据物品的销量，曝光率等来排序物品，并推荐给用户</li><li>根据不同的算法，整合不同维度的数据，来智能的推荐物品</li></ol><h2>简单的推荐系统模型</h2><p>设：U 为所有用户集合P 为所有物品集合R 为用户对物品的喜好程度模型 Model(R) = U * P算法核心：</p><p>&lt;!-- more --&gt;</p><p>通过用户对不同物品的打分，来预测用户对其他物品的喜好程度。此处并没有考虑用户和物品的属性，如：用户年龄，性别，学历，工作等，物品价格，品类，外观等。</p><p>通过用户对物品的打分，可以建立一个推荐值矩阵，之后就可以通过运算该矩阵来预测用户喜好，即为矩阵分解算法！矩阵分解：将推荐值矩阵 R 分解为矩阵 U 和 矩阵 P，使得 U 和 P 的乘积得到的新矩阵 R* 中的元素与 R 中的已知元素的值非常接近，那么 R* 中对应于 R 中的未知元素的值就是预测值。</p><p>推荐值矩阵：</p><p><img src="/2019/07/30/基于矩阵分解算法的推荐系统实战/table.png"></p><table><thead><tr><th></th><th>时间简史</th><th>万历三十年</th><th>大秦帝国</th><th>红楼梦</th><th>数学简史</th></tr></thead><tbody><tr><td>小明</td><td>1</td><td></td><td>4</td><td></td><td>1</td></tr><tr><td>小王</td><td></td><td>2</td><td></td><td>2</td><td>4</td></tr><tr><td>小李</td><td>4</td><td></td><td>1</td><td></td><td>4</td></tr><tr><td>小张</td><td></td><td>5</td><td>1</td><td>4</td><td></td></tr></tbody></table><p>推荐值矩阵关键性问题：</p><ol><li>初始值获取，数据的收集</li><li>从推荐值矩阵中已知数据预测未知数据</li><li>建立评价系统，用于检验推荐系统的效果</li></ol><h1>收集数据</h1><p>一般可以采取网络爬虫的方式，比如对于数据的评分，可以爬取豆瓣读书上的数据，也可以在自己可以控制的网站上做埋点等来收集用户信息。</p><h1>预测未知数据</h1><p>关键挑战：</p><ul><li><p>当用户和物品的数量都比较大时，推荐之矩阵通常会是一个稀疏矩阵（在矩阵中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵），说明大多数用户可能并没有对大多数物品表达喜好。</p></li><li><p>冷启动问题，是每一个推荐系统都需要面对的问题。</p></li></ul><p>矩阵分解实例：$$\begin{pmatrix}1 &amp; 3 &amp; 5 &amp; 4 \&amp; 2  &amp;  &amp; 4 \<br>3 &amp; 4 &amp; 3 &amp; &amp;  \\end{pmatrix}<br>\approx\begin{pmatrix}-0.77 &amp; -1.84 \-0.2 &amp; -1.85 \<br>-1.98 &amp; -0.54 \\end{pmatrix}\begin{pmatrix}-1.46 &amp; -1.67 &amp; -0.88 &amp; -0.32 \0.04 &amp; -0.89 &amp; -2.3 &amp; -2.04 &amp;  \\end{pmatrix}  =\begin{pmatrix}1.06 &amp; 2.93 &amp; 4.9 &amp; 4 \0.21 &amp; 1.97 &amp; 4.41 &amp; 3.84 \<br>2.88 &amp; 3.79 &amp; 2.98 &amp; 1.73 &amp;  \\end{pmatrix}$$即：$$R \approx U * P^T = R^*$$对比最左侧的元素矩阵和最右侧的预测矩阵，预测矩阵中位于原始矩阵缺失数值位置的元素值，即为预测值。同时也可以得到$$R_{ij} \approx U_i * P_j = R^*_{ij}$$</p><p>即：对于在 ij 位置上的物品的喜好数据，可以通过第 i 个用户的画像向量和第 j 个物品的画像向量代表。使用图形表示如下：<img src="/2019/07/30/基于矩阵分解算法的推荐系统实战/1.png">其中 k 在数学上的意义为矩阵分解的秩，在业务上的意义为 影响用户给物品评分的 k 个影响因子，当前我们无法直接知道 k 的值，在模型训练时，一般采取交叉验证的方式来寻找最优的 k 值。</p><p>我们可以使用“和方差”来作为损失函数</p><p>$$min_{U,P}\sum_{i,j}1/2(R_{ij}-U_i \cdot P_j)^2$$</p><blockquote><p>这里通过已知的{(i，j),r(ij)，计算“和方差”，使之达到最小，即预测值越接近真实值。以此得出的 U 和 P 的值就是我们需要的值。</p></blockquote><h2>损失函数的梯度</h2><p>单独取出误差$$L_{ij} = 1/2(R_{ij} - U_i \cdot P_j)^2$$对误差 L 分别在 U 和 P 上求导可得$$\frac{\partial L_{ij}}{\partial U_i} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial U_i} = -P_j(R_{ij} - U_i \cdot P_j)$$</p><p>$$\frac{\partial L_{ij}}{\partial P_j} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial P_j} = -U_i(R_{ij} - U_i \cdot P_j)$$</p><p>现在我们已经知道了损失函数的梯度（导数），下面就可以使用梯度下降法来求解 U 和 P 的值。</p><p><strong>梯度下降法</strong><img src="/2019/07/30/基于矩阵分解算法的推荐系统实战/2.png">随机选取一个起始点，然后在负梯度的方向上持续训练，直到损失函数的梯度越来越接近零，此时即可取得最优解。</p><h2>引入正则化</h2><p>为了防止过拟合的发生，对损失函数加入正则化参数$$λ[\sum_{i=1}^m|U_i|^2 + \sum_{i=1}^n|P_i|^2]$$λ&gt;0</p><blockquote><p>这样，当 U 和 P 都保证比较小的情况下，U 或者 P 的数值剧烈变化时，U 和 P 的点积也不会有太大的变化。</p></blockquote><p>最终的损失函数为：$$min_{U,P}\sum_{i,j}1/2(R_{ij}-U_i \cdot P_j)^2 + λ[\sum_{i=1}^m|U_i|^2 + \sum_{i=1}^n|P_i|^2]$$最终损失函数的梯度为：$$\frac{\partial L_{ij}}{\partial U_i} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial U_i} = -P_j(R_{ij} - U_i \cdot P_j) + λU_i$$</p><p>$$\frac{\partial L_{ij}}{\partial P_j} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial P_j} = -U_i(R_{ij} - U_i \cdot P_j) + λP_j$$</p><h2>运用梯度下降法求最优解</h2><p>设定梯度下降的速率 γ（学习速率）和 k 值，并随机初始化 U 和 P，重复训练，直到误差满意为止。$$U_i = U_i - γ\frac{\partial L_{ij}}{\partial U_i}$$</p><p>$$P_j = P_j - γ\frac{\partial L_{ij}}{\partial P_j}$$</p><h1>评估推荐系统</h1><ul><li>最基本的就是，通过训练集训练模型，通过测试集测试模型，如果模型在测试集上的表现达到我们的预期，则该模型可以上线部署。一般采用平均绝对离差来验证模型预测值的好坏$$M_d = 1/n\sum|r_{up} - r^*_{up}|$$</li></ul><blockquote><p>n: 测试集中推荐值的总数量</p><p>r(up): 真实的用户 u 对物品 p 的推荐值</p><p>r*(up): 预测的用户 u 对物品 p 的推荐值</p></blockquote><ul><li>在线的 A/B 测试</li></ul><h1>项目实战</h1><p>数据集格式如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="number">1119</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">167</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">6265</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">1440</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">1427</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">5404</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">259</span><span class="number">7.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">4156</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">419</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">415</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">2834</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">228</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">107</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">440</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">44</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">455</span><span class="number">10.000000</span></span><br></pre></td></tr></table></figure></p><blockquote><p>第一列为用户 ID，第二列为物品 ID，第三列为对应的打分（1-10）</p></blockquote><p>总体代码基于 surprise 库，可以先安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scikit-surprise</span><br></pre></td></tr></table></figure></p><p>下面导入相关库和数据集</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> surprise</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> BaselineOnly</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> Reader</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> accuracy</span><br><span class="line"><span class="keyword">from</span> surprise.model_selection <span class="keyword">import</span> cross_validate</span><br><span class="line"><span class="keyword">from</span> surprise.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reader = Reader(line_format=<span class="string">'user item rating'</span>, sep=<span class="string">'\t'</span>, rating_scale=(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">data = Dataset.load_from_file(<span class="string">'book_ratings.dat.txt'</span>, reader=reader)</span><br><span class="line"><span class="comment"># 将数据随机分为训练和测试数据集</span></span><br><span class="line">trainset, testset = train_test_split(data, test_size=<span class="number">.25</span>)</span><br></pre></td></tr></table></figure></p><p>根据公式，定义算法函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatrixFactorization</span><span class="params">(surprise.AlgoBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lr, n_epochs, n_factors, lmd)</span>:</span></span><br><span class="line">        self.lr = lr  <span class="comment"># 梯度下降法的学习速率</span></span><br><span class="line">        self.n_epochs = n_epochs  <span class="comment"># 梯度下降法的迭代次数</span></span><br><span class="line">        self.n_factors = n_factors  <span class="comment"># 分解的矩阵的秩，即影响用户打分的隐藏因子</span></span><br><span class="line">        self.lmd = lmd  <span class="comment"># 正则化参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, trainset)</span>:</span></span><br><span class="line">        print(<span class="string">"Fitting data..."</span>)</span><br><span class="line">        <span class="comment"># 随机初始化 u 和 p 矩阵</span></span><br><span class="line">        u = np.random.normal(<span class="number">0</span>, <span class="number">.1</span>, (trainset.n_users, self.n_factors))  <span class="comment"># 均值为0，方差为0.1，（行数，列数）</span></span><br><span class="line">        p = np.random.normal(<span class="number">0</span>, <span class="number">.1</span>, (trainset.n_items, self.n_factors))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 梯度下降法</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.n_epochs):</span><br><span class="line">            print(<span class="string">"Round:"</span>, _)</span><br><span class="line">            <span class="keyword">for</span> i, j, r_ij <span class="keyword">in</span> trainset.all_ratings():</span><br><span class="line">                <span class="comment"># 这里就是套用上面得到的公式</span></span><br><span class="line">                <span class="comment"># u_old[i] = u[i]</span></span><br><span class="line">                err = r_ij - np.dot(u[i], p[j])</span><br><span class="line">                u[i] -= -self.lr * err * p[j] + self.lr * self.lmd * u[i]</span><br><span class="line">                p[j] -= -self.lr * err * u[i] + self.lr * self.lmd * p[j]</span><br><span class="line">        </span><br><span class="line">        self.u, self.p = u, p</span><br><span class="line">        self.trainset = trainset</span><br><span class="line">        print(<span class="string">"End fitting!"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">estimate</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.trainset.knows_user(i) <span class="keyword">and</span> self.trainset.knows_item(j):</span><br><span class="line">            <span class="keyword">return</span> np.dot(self.u[i], self.p[j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.trainset.global_mean  <span class="comment"># 返回平均值</span></span><br></pre></td></tr></table></figure></p><p>最后再训练、预测，评估<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">algo = MatrixFactorization(<span class="number">0.005</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">0.2</span>)</span><br><span class="line">algo.fit(trainset)</span><br><span class="line">predictions = algo.test(testset)</span><br><span class="line">accuracy.mae(predictions)</span><br></pre></td></tr></table></figure></p><blockquote><p>可以调整学习速率，迭代次数，隐藏因子个数和正则化参数等来训练不同的模型，并评估结果，获取满意的模型。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/30/基于矩阵分解算法的推荐系统实战/jiqixuexi.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于矩阵分解算法的图书推荐系统实战&lt;/p&gt;
&lt;h1&gt;推荐系统&lt;/h1&gt;
&lt;p&gt;推荐系统，可以根据用户的喜好来推荐给用户不同的事物。&lt;
      
    
    </summary>
    
      <category term="机器学习" scheme="https://blog.luobodazahui.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://blog.luobodazahui.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://blog.luobodazahui.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>轻松玩转HTTPS</title>
    <link href="https://blog.luobodazahui.top/2019/07/30/%E8%BD%BB%E6%9D%BE%E7%8E%A9%E8%BD%ACHTTPS/"/>
    <id>https://blog.luobodazahui.top/2019/07/30/轻松玩转HTTPS/</id>
    <published>2019-07-30T01:22:22.000Z</published>
    <updated>2019-07-30T02:46:42.651Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/07/30/轻松玩转HTTPS/4.jpg"></p><p>今天分享一个非常给力的 SSL 证书生成网站，从此 HTTPS 不再是难事儿！</p><h1>Certbot</h1><p>不错，今天的主角就是给力的 Certbot，免费好用，真是我等 diaosi 的一大福音。</p><p>我们先打开其官网，整体浏览下</p><blockquote><p>https://certbot.eff.org/lets-encrypt/centos6-nginx</p></blockquote><p>我们可以看到，想使用 Certbot，需要一些条件</p><p><img src="/2019/07/30/轻松玩转HTTPS/1.png"></p><ol><li><p>需要一个命令行服务器，一般就是 linux了。我这里使用的是 CentOS6</p></li><li><p>我们需要已经部署了一个 http 服务，80 端口是监听状态的，我使用的是 Nginx 代理。</p></li><li><p>有执行 root 权限的用户。</p><p>&lt;!-- more --&gt;</p></li></ol><h1>具体安装</h1><p>在使用官网上的安装步骤前，我们要先有 Nginx，并且已经成功启动，当然也要有绑定了公网 IP 的域名，因为 SSL 证书都是要绑定到具体域名的。公网 IP，域名申请，Nginx 安装等，就不说啦，我们现在来看一下我这里 Nginx 的简单配置。</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  www.kungfuworld.top;</span><br><span class="line">    ssl on;</span><br><span class="line">    root        /home/KungFuWorld/      ;</span><br><span class="line">    access_log  /home/log/access.log;</span><br><span class="line">    error_log   /home/log/error.log;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:5000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name kungfuworld.top;</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我配置的域名是 www.kungfuworld.top，后面在执行 Certbot 安装时，会自动扫描到这里配置的域名，从而根据这个域名来生成证书。下面，就是一步步的安装官网的步骤来操作就好了</p><h2>安装 Certbot</h2><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line">sudo mv certbot-auto /usr/local/bin/certbot-auto</span><br><span class="line">sudo chown root /usr/local/bin/certbot-auto</span><br><span class="line">sudo chmod 0755 /usr/local/bin/certbot-auto</span><br></pre></td></tr></table></figure></p><h2>生成证书</h2><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/bin/certbot-auto certonly --nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>中间会有一些需要用户交互的步骤，按照提示操作就好</p></blockquote><h2>配置 Nginx</h2><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate /etc/letsencrypt/live/kungfuworld.top/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/kungfuworld.top/privkey.pem;</span><br></pre></td></tr></table></figure></p><p>在刚刚的 Nginx 配置文件中，增加上面的两条配置，就完成了证书的配置。</p><p>如果不出意外，该域名的 HTTPS 就可以访问了，而且是浏览器信任的证书。</p><p><img src="/2019/07/30/轻松玩转HTTPS/2.png"></p><h2>自动更新</h2><p>使用 Certbot 安装的证书，只有 90 天的有效期，还好其提供了方便的自动更新功能</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/certbot-auto renew</span><br></pre></td></tr></table></figure></p><p>我们可以创建一个 crontab 任务，来自动更新<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 4 */80 * * /usr/local/bin/certbot-auto renew &amp;&gt;&gt; /dev/null</span><br></pre></td></tr></table></figure></p><blockquote><p>每隔 80 天在凌晨 4 点执行一次 renew 操作</p></blockquote><p>至此，基于 Certbot 的 HTTPS 配置就完成了，可以开心的使用 HTTPS 喽。</p><p><img src="/2019/07/30/轻松玩转HTTPS/3.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/30/轻松玩转HTTPS/4.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天分享一个非常给力的 SSL 证书生成网站，从此 HTTPS 不再是难事儿！&lt;/p&gt;
&lt;h1&gt;Certbot&lt;/h1&gt;
&lt;p&gt;不错，今天的主角就是给力的 Ce
      
    
    </summary>
    
      <category term="系统" scheme="https://blog.luobodazahui.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="系统" scheme="https://blog.luobodazahui.top/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="shell" scheme="https://blog.luobodazahui.top/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>惊闻马大姐婚变，我连夜爬了微博评论，沦陷</title>
    <link href="https://blog.luobodazahui.top/2019/07/29/%E6%83%8A%E9%97%BB%E9%A9%AC%E5%A4%A7%E5%A7%90%E5%A9%9A%E5%8F%98%EF%BC%8C%E6%88%91%E8%BF%9E%E5%A4%9C%E7%88%AC%E4%BA%86%E5%BE%AE%E5%8D%9A%E8%AF%84%E8%AE%BA%EF%BC%8C%E6%B2%A6%E9%99%B7/"/>
    <id>https://blog.luobodazahui.top/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/</id>
    <published>2019-07-29T11:41:36.000Z</published>
    <updated>2019-07-30T02:21:22.636Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/pojing.jpg"></p><p>娱乐圈的瓜真的是一波又一波，这次又轮到文章和马伊琍了。他们具体为啥会婚变，咱也不知道，啥也不敢问，啥也不干说。不过他们微博下面还是开锅了，下面就一起来看看吧。</p><h1>微博页面分析</h1><p>首先我们先来看看微博页面，爬虫要从何处下手。</p><h2>页面分析</h2><p>我们直接进入到马伊琍微博的评论页面</p><p>https://weibo.com/1196235387/HFyy4wabF?filter=hot&amp;root_comment_id=0&amp;type=comment</p><p>可以看到页面如下：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/1.png"></p><p>&lt;!-- more --&gt;</p><p>然后我们使用 Chrome 的调试工具（F12），切换到 Network 页签，再次刷新页面，能够看到一条请求，如下：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/2.png"></p><p>先拷贝出这个请求 URL，放到 Postman 里试一试，如图：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/3.png"></p><p>这都是些神马啊</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/4.png" width="250" height="150"></p><p>果然没那么简单，看来有反爬在作怪，那么反反爬三板斧先用起来，headers 加一哈再来继续继续观察 Network 中的请求 headers，发现有一个 Cookie 是那么的长，拷贝出来添加上试试吧</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/5.png"></p><p>再次使用 Postman 调用</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/6.png"></p><p>哎呦，不错哦，有正常数据返回了</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/aiyou.jpg"></p><h2>URL 分析</h2><p>现在再来看看我们使用的 URL</p><p>https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;from=singleWeiBo&amp;__rnd=1564381638125，总共有4各参数，ajwvr、id、from 和 __rnd。</p><p><strong>1.精简 URL</strong></p><p>我们先从后往前一个一个的去掉每个参数试试，发现去掉后面两个，我们都可以获取到评论记录，那么后面两个参数我们就去掉它，现在的 URL 变为：</p><p>https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659</p><p><strong>2.增加 page 参数</strong></p><p>再次观察现在获取到的数据，发现返回的数据还有一个 page 的数据域，如下：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/7.png"></p><p>而且当前是在 &quot;pagenum&quot;: 1 的，那么我们要怎么控制到不同的 page 页面呢，试着增加一个 page 参数到 URL 中，如：</p><p>https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;page=2</p><p>果然，真的访问到 page 2 了，是不是很香啊</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/8.png"></p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/zhengxiang.jpg"></p><p>至此，我们的页面分析就基本完成了，下面就是拿数据喽。</p><h1>获取并保存数据</h1><p>获取保存数据的部分就比较常规了，直接看代码</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'SINAGLOBAL=4979979695709.662.1540896279940; SUB=_2AkMrYbTuf8PxqwJRmPkVyG_nb45wwwHEieKdPUU1JRMxHRl-yT83qnI9tRB6AOGaAcavhZVIZBiCoxtgPDNVspj9jtju; SUBP=0033WrSXqPxfM72-Ws9jqgMF55529P9D9W5d4hHnVEbZCn4G2L775Qe1; _s_tentry=-; Apache=1711120851984.973.1564019682028; ULV=1564019682040:7:2:1:1711120851984.973.1564019682028:1563525180101; login_sid_t=8e1b73050dedb94d4996a67f8d74e464; cross_origin_proto=SSL; Ugrow-G0=140ad66ad7317901fc818d7fd7743564; YF-V5-G0=95d69db6bf5dfdb71f82a9b7f3eb261a; WBStorage=edfd723f2928ec64|undefined; UOR=bbs.51testing.com,widget.weibo.com,www.baidu.com; wb_view_log=1366*7681; WBtopGlobal_register_version=307744aa77dd5677; YF-Page-G0=580fe01acc9791e17cca20c5fa377d00|1564363890|1564363890'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mayili</span><span class="params">(page)</span>:</span></span><br><span class="line">    mayili = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, page):</span><br><span class="line">        print(<span class="string">"page: "</span>, i)</span><br><span class="line">        url = <span class="string">'https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;page=%s'</span> % int(i)</span><br><span class="line">        req = requests.get(url, headers=Headers).text</span><br><span class="line">        html = json.loads(req)[<span class="string">'data'</span>][<span class="string">'html'</span>]</span><br><span class="line">        content = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># comment = content.find_all('div', attrs=&#123;'class': 'list_li S_line1 clearfix'&#125;)</span></span><br><span class="line">        comment_text = content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'WB_text'</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> comment_text:</span><br><span class="line">            mayili_text = c.text.split(<span class="string">"："</span>)[<span class="number">1</span>]</span><br><span class="line">            mayili.append(mayili_text)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mayili</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wenzhang</span><span class="params">(page)</span>:</span></span><br><span class="line">    wenzhang = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, page):</span><br><span class="line">        print(<span class="string">"page: "</span>, i)</span><br><span class="line">        url = <span class="string">'https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042089738682&amp;page=%s'</span> % int(i)</span><br><span class="line">        req = requests.get(url, headers=Headers).text</span><br><span class="line">        html = json.loads(req)[<span class="string">'data'</span>][<span class="string">'html'</span>]</span><br><span class="line">        content = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># comment = content.find_all('div', attrs=&#123;'class': 'list_li S_line1 clearfix'&#125;)</span></span><br><span class="line">        comment_text = content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'WB_text'</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> comment_text:</span><br><span class="line">            wenzhang_text = c.text.split(<span class="string">"："</span>)[<span class="number">1</span>]</span><br><span class="line">            wenzhang.append(wenzhang_text)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wenzhang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start"</span>)</span><br><span class="line">    ma_comment = mayili(<span class="number">1001</span>)</span><br><span class="line">    mayili_pd = pd.DataFrame(columns=[<span class="string">'mayili_comment'</span>], data=ma_comment)</span><br><span class="line">    mayili_pd.to_csv(<span class="string">'mayili.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    wen_comment = wenzhang(<span class="number">1001</span>)</span><br><span class="line">    wenzhang_pd = pd.DataFrame(columns=[<span class="string">'wenzhang_comment'</span>], data=wen_comment)</span><br><span class="line">    wenzhang_pd.to_csv(<span class="string">'wenzhang.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p><p>总共 page 页面有 2000 多页，要爬完还真是需要一段时间，我这里配置了 1000，应该是够了。</p><p>而且还做了 sleep 5 的操作，主要是因为如果爬取太快，会被微博视为异常请求，会被禁，而且也不会对人家的正常服务产生影响，毕竟盗亦有道嘛！</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/jilinggui.jpg" width="250" height="150"></p><h1>词云做成</h1><p>等爬虫跑完之后，我们简单看下数据的内容马伊琍微博评论</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/9.png"></p><p>文章微博评论</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/10.png"></p><p>数据都拿到了，下面就做成词云看看各路粉丝的态度吧这里就不对评论内容做过多置喙了，毕竟说多了都是错</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/jilinggui2.jpg" width="250" height="150"></p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordcloud_m</span><span class="params">()</span>:</span></span><br><span class="line">    df = pd.read_csv(<span class="string">'mayili.csv'</span>, usecols=[<span class="number">1</span>])</span><br><span class="line">    df_copy = df.copy()</span><br><span class="line">    df_copy[<span class="string">'mayili_comment'</span>] = df_copy[<span class="string">'mayili_comment'</span>].apply(<span class="keyword">lambda</span> x: str(x).split())  <span class="comment"># 去掉空格</span></span><br><span class="line">    df_list = df_copy.values.tolist()</span><br><span class="line">    comment = jieba.cut(str(df_list), cut_all=<span class="literal">False</span>)</span><br><span class="line">    words = <span class="string">' '</span>.join(comment)</span><br><span class="line">    wc = WordCloud(width=<span class="number">2000</span>, height=<span class="number">1800</span>, background_color=<span class="string">'white'</span>, font_path=font,</span><br><span class="line">                   stopwords=STOPWORDS, contour_width=<span class="number">3</span>, contour_color=<span class="string">'steelblue'</span>)</span><br><span class="line">    wc.generate(words)</span><br><span class="line">    wc.to_file(<span class="string">'m.png'</span>)</span><br></pre></td></tr></table></figure></p><p>马伊琍评论词云</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/m.png"></p><p>文章评论词云</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/w.png"></p><p>最后，我把所有的代码都上传到 GitHub 上了，需要的可以自取https://github.com/zhouwei713/data_analysis/tree/master/weibo_mayili_wenzhang</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/pojing.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;娱乐圈的瓜真的是一波又一波，这次又轮到文章和马伊琍了。他们具体为啥会婚变，咱也不知道，啥也不敢问，啥也不干说。不过他们微博下面还
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://blog.luobodazahui.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/tags/Python/"/>
    
  </entry>
  
</feed>
