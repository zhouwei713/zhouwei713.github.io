<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luobodazahui</title>
  
  <subtitle>周萝卜的分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.luobodazahui.top/"/>
  <updated>2019-08-30T02:23:25.353Z</updated>
  <id>https://blog.luobodazahui.top/</id>
  
  <author>
    <name>Luobo Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数说成龙电影|数据告诉你，成龙大哥真的老了吗</title>
    <link href="https://blog.luobodazahui.top/2019/08/30/%E6%95%B0%E8%AF%B4%E6%88%90%E9%BE%99%E7%94%B5%E5%BD%B1-%E6%95%B0%E6%8D%AE%E5%91%8A%E8%AF%89%E4%BD%A0%EF%BC%8C%E6%88%90%E9%BE%99%E5%A4%A7%E5%93%A5%E7%9C%9F%E7%9A%84%E8%80%81%E4%BA%86%E5%90%97/"/>
    <id>https://blog.luobodazahui.top/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/</id>
    <published>2019-08-30T02:15:37.000Z</published>
    <updated>2019-08-30T02:23:25.353Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/1.jpg"></p><p>最近的电影《哪吒》绝对是风靡全国，各种“我命由我不由天”，激励着平民大众。而《上海堡垒》则彻底扑街，鹿晗也跌落神坛，流量不再。而老大哥成龙的新片《龙牌之谜》也在日前悄悄上映了，之所用悄悄是因为电影并没有做过多的宣传，低调上映。但是上映之后的口碑却不敢恭维，好多影迷都说，大哥老了，也开始持续拍烂片了。今天，我们就来分析下历年成龙的电影得分数据和《龙牌之谜》的评论，用数据来告诉你，真的是大哥老了，打不动了吗？</p><p><a id="more"></a></p><h1>豆瓣数据分析</h1><h2>豆瓣数据获取</h2><p>爬取的过程还是蛮简单的，直接给出代码</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">150</span>, <span class="number">25</span>):</span><br><span class="line"></span><br><span class="line">        url = <span class="string">'https://movie.douban.com/celebrity/1054531/movies?start=%s&amp;format=text&amp;sortby=time&amp;role=A1'</span> % i</span><br><span class="line"></span><br><span class="line">        res = requests.get(url).text</span><br><span class="line"></span><br><span class="line">        content = BeautifulSoup(res, <span class="string">"html.parser"</span>)</span><br><span class="line"></span><br><span class="line">        tbody_tag = content.find_all(<span class="string">'tbody'</span>)</span><br><span class="line"></span><br><span class="line">        tr_tag = tbody_tag[<span class="number">1</span>].find_all(<span class="string">'tr'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_tag:</span><br><span class="line"></span><br><span class="line">            tmp = []</span><br><span class="line"></span><br><span class="line">            name = tr.find(<span class="string">'a'</span>).text</span><br><span class="line"></span><br><span class="line">            year = tr.find(<span class="string">'td'</span>, attrs=&#123;<span class="string">'headers'</span>: <span class="string">'mc_date'</span>&#125;).text</span><br><span class="line"></span><br><span class="line">            rate = tr.find(<span class="string">'td'</span>, attrs=&#123;<span class="string">'headers'</span>: <span class="string">'mc_rating'</span>&#125;).text</span><br><span class="line"></span><br><span class="line">            tmp.append(name)</span><br><span class="line"></span><br><span class="line">            tmp.append(year)</span><br><span class="line"></span><br><span class="line">            tmp.append(rate.replace(<span class="string">'\n'</span>, <span class="string">''</span>).strip().replace(<span class="string">'-'</span>, <span class="string">''</span>))</span><br><span class="line"></span><br><span class="line">            data.append(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    data = get_data()</span><br><span class="line"></span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'jack_data.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">        f.write(<span class="string">'name,year,rate\n'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">                rowcsv = <span class="string">'&#123;&#125;,&#123;&#125;,&#123;&#125;'</span>.format(d[<span class="number">0</span>], d[<span class="number">1</span>], d[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">                f.write(rowcsv)</span><br><span class="line"></span><br><span class="line">                f.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></p><p>数据拿到之后，我们再做些简单的数据处理，去除掉 rate 为空的数据，和一些异常数据</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'jack_data.csv'</span>)</span><br><span class="line"></span><br><span class="line">df.isnull().sum()  <span class="comment"># 查看缺失值情况</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df_copy = df.copy()</span><br><span class="line"></span><br><span class="line">df_copy.dropna(how=<span class="string">'any'</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 去掉缺失值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉异常值</span></span><br><span class="line"></span><br><span class="line">except_data = df_copy[df_copy[<span class="string">'name'</span>].apply(<span class="keyword">lambda</span> x: x == <span class="string">'喜剧之王'</span>)].index</span><br><span class="line"></span><br><span class="line">df_copy.drop(except_data, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><h1>数据分析</h1><h2>一、成龙电影总体得分分布</h2><p>成龙大哥的高分电影，多集中在早年。大多数电影的评分，都几种在6-7分上下浮动。而近些年的几部电影，口碑都不是很好，有持续下滑的趋势。</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/total.jpg"></p><h2>二、评分最高与最低影片</h2><p>成龙大哥的电影，最高得分为《龙争虎斗》，8.2 分，不过这个电影好像是李小龙的呀，尴了个尬，不知道成龙在电影里干了啥，豆瓣会把这部电影分给成龙。</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/top5.jpg"></p><p>评分最低的是《神探蒲松龄》，只有 3.8 分。年岁增大，不能再像以前那样“功夫喜剧”了，成龙电影未来的方向在哪里呢。</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/bottom5.jpg"></p><p>而《龙争虎斗》是 1973 年上映的，《神探蒲松龄》 则是 2019 年上映的，也从侧面反映出近些年龙大哥在电影市场的不给力情况。其实龙大哥早些年的《A 计划》，《警察故事》等都是我蛮喜欢的电影。</p><h2>三、出产电影年份</h2><p>我们再来看看哪些年份，成龙大哥出产的电影比较多呢</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/year10.jpg"></p><p>1978 年，成龙出产的电影占比是最多的，总共是 6 部，接下来就是 1973、1985 和 1976 年，都是 5部电影。</p><p>我们来看下这几年电影的评分情况</p><p>1978 年</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/1978.jpg"></p><p>1973 年</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/1973.jpg"></p><p>1985 年</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/1985.jpg"></p><p>1976 年</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/1976.jpg"></p><p>可以看出来，早些年，大哥年轻的时候，无论是数量还是质量，都是比较有保证的。</p><p>不过太多电影过于遥远，真心没看过啊！</p><p><img src="/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/wunai.jpg"></p><p>虽然说，成龙电影总体评分并不是太高，最高也才 8 点几分，但是作为华语影坛的大哥级人物，大家对他的期待还是非常高的。</p><p>不管怎么说，还是希望成龙大哥能够好好保养身体，在以后的时光中，给大家带来更多好的作品。</p><p>完整代码：</p><blockquote><p>https://github.com/zhouwei713/douban/tree/master/jackchen</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/30/数说成龙电影-数据告诉你，成龙大哥真的老了吗/1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近的电影《哪吒》绝对是风靡全国，各种“我命由我不由天”，激励着平民大众。而《上海堡垒》则彻底扑街，鹿晗也跌落神坛，流量不再。而老大哥成龙的新片《龙牌之谜》也在日前悄悄上映了，之所用悄悄是因为电影并没有做过多的宣传，低调上映。但是上映之后的口碑却不敢恭维，好多影迷都说，大哥老了，也开始持续拍烂片了。今天，我们就来分析下历年成龙的电影得分数据和《龙牌之谜》的评论，用数据来告诉你，真的是大哥老了，打不动了吗？&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://blog.luobodazahui.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>搭建邮件服务器和论坛</title>
    <link href="https://blog.luobodazahui.top/2019/08/20/%E6%90%AD%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%AE%BA%E5%9D%9B/"/>
    <id>https://blog.luobodazahui.top/2019/08/20/搭建邮件服务器和论坛/</id>
    <published>2019-08-20T03:05:38.000Z</published>
    <updated>2019-08-20T03:11:30.520Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/08/20/搭建邮件服务器和论坛/6.jpg" width="520" height="520"></p><p>今天一起来看看如何搭建自己的邮件服务器和论坛服务，使用的工具分别为 Ewomail 和 Discourse。</p><h1>搭建邮件服务器</h1><p>安装 Ewomail 还是很简单的，它支持一键式安装。（重要，如果服务器上有其他软件，特别是 MySQL 时，请慎重安装！）</p><h2>使用官网方法安装</h2><p>直接使用官方文档安装即可（http://doc.ewomail.com/docs/ewomail/install），安装的时候，需要指定一个域名地址，地址就写自己申请的域名，或者安装之后再修改也是可以的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br><span class="line">cd /root</span><br><span class="line">git clone https://github.com/gyxuehu/EwoMail.git</span><br><span class="line">cd /root/EwoMail/install</span><br><span class="line">#需要输入一个邮箱域名，不需要前缀，列如下面的ewomail.cn</span><br><span class="line">sh ./start.sh ewomail.cn</span><br></pre></td></tr></table></figure></p><p>安装之后，会有 iptables，如果其他服务的端口不可访问，记得来检查下 iptables。</p><p><a id="more"></a></p><h2>DNS 配置</h2><p>需要准备好一个域名，并配置解析<img src="/2019/08/20/搭建邮件服务器和论坛/1.png">如上图所示，需要增加一个 mail 的子域名，同时再增加一个 MX 类型的解析规则。</p><h2>邮箱后台配置</h2><p>上面两步完成之后，就可以打开邮箱管理后台了（http://IP:8010 （默认账号admin，密码ewomail123））</p><h3>设置邮箱域名</h3><p>可以添加邮箱的副域名<img src="/2019/08/20/搭建邮件服务器和论坛/2.png"></p><h3>添加使用邮箱</h3><p>添加邮箱，用于收发邮件<img src="/2019/08/20/搭建邮件服务器和论坛/3.png"></p><h3>登陆客户端</h3><p>Ewomail 提供了一个 WebMail 客户端，但是有时候登陆会存在问题。这里不再介绍。我使用的是 Foxmail 客户端</p><p><strong>新建账号</strong><img src="/2019/08/20/搭建邮件服务器和论坛/4.png">使用刚刚创建的邮箱登陆</p><p><strong>设置服务器信息</strong><img src="/2019/08/20/搭建邮件服务器和论坛/5.png">如果密码，服务状态等信息都无误，点击创建之后，就成功创建了客户端。</p><p>接下来就可以发送邮件了，只是对于 QQ 邮箱，还是有被退信的危险，不过 163 邮箱我测试是成功的。</p><h2>troubleshooting</h2><p>如果以上配置完成之后，还存在问题，可以查看日志<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/maillog</span><br></pre></td></tr></table></figure></p><p>也可以修改配置文件中的相关信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/postfix/main.cf</span><br></pre></td></tr></table></figure></p><h1>基于 Discourse 搭建论坛</h1><p>搭建 Discourse 论坛也很简单，直接使用 docker 形式安装即可。Linux 版 docker 安装指南https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md</p><p>两个比较重要的配置，email 和 域名，需要在安装前就准备好，当然也可以先行安装，然后修改 app.yml 配置文件，再进行 rebuild 操作。执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./discourse-setup</span><br></pre></td></tr></table></figure></p><p>命令行输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hostname for your Discourse? [discourse.example.com]: </span><br><span class="line">Email address for admin account(s)? [me@example.com,you@example.com]: </span><br><span class="line">SMTP server address? [smtp.example.com]: </span><br><span class="line">SMTP port? [587]: </span><br><span class="line">SMTP user name? [user@example.com]: </span><br><span class="line">SMTP password? [pa$$word]: </span><br><span class="line">Let&apos;s Encrypt account email? (ENTER to skip) [me@example.com]:</span><br></pre></td></tr></table></figure></p><blockquote><p>开始的安装，由于还没有 app.yml，所以有些配置不能做修改。</p></blockquote><p>安装完成后，会生成一个目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/discourse/containers</span><br></pre></td></tr></table></figure></p><blockquote><p>该目录下有一个 app.yml 文件</p></blockquote><h2>使用已经存在的 nginx 服务器</h2><p>修改 app.yml 文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">templates:</span><br><span class="line">  - &quot;templates/postgres.template.yml&quot;</span><br><span class="line">  - &quot;templates/redis.template.yml&quot;</span><br><span class="line">  - &quot;templates/web.template.yml&quot;</span><br><span class="line">  - &quot;templates/web.ratelimited.template.yml&quot;</span><br><span class="line">  - &quot;templates/web.socketed.template.yml&quot;</span><br><span class="line">## Uncomment these two lines if you wish to add Lets Encrypt (https)</span><br><span class="line">  #- &quot;templates/web.ssl.template.yml&quot;</span><br><span class="line">  #- &quot;templates/web.letsencrypt.ssl.template.yml&quot;</span><br><span class="line"></span><br><span class="line">## which TCP/IP ports should this container expose?</span><br><span class="line">## If you want Discourse to share a port with another webserver like Apache or nginx,</span><br><span class="line">## see https://meta.discourse.org/t/17247 for details</span><br><span class="line">## expose:</span><br><span class="line">##   - &quot;80:80&quot;   # http</span><br><span class="line">##   - &quot;443:443&quot; # https</span><br></pre></td></tr></table></figure></p><blockquote><p>增加 &quot;templates/web.socketed.template.yml&quot; 配置，并注释掉 http 和 https 所在行。</p></blockquote><h2>Email 配置</h2><p>这里的 email 服务器使用上面搭建的自有服务器。修改 app.yml 文件</p><h2>域名配置</h2><p>修改 app.yml 文件设置 DISCOURSE_HOSTNAME 参数为自有域名，如：talk.example.com<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DISCOURSE_DEVELOPER_EMAILS: &apos;admin@example.com&apos;</span><br><span class="line"></span><br><span class="line">DISCOURSE_SMTP_ADDRESS: smtp.example.com</span><br><span class="line">DISCOURSE_SMTP_PORT: 25</span><br><span class="line">DISCOURSE_SMTP_USER_NAME: admin@example.com</span><br><span class="line">DISCOURSE_SMTP_PASSWORD: &quot;12345678&quot;</span><br><span class="line">DISCOURSE_SMTP_ENABLE_START_TLS: false           # (optional, default true)</span><br></pre></td></tr></table></figure></p><p>以上操作之后，都需要执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/discourse</span><br><span class="line"> ./launcher stop app</span><br><span class="line">./launcher rebuild app</span><br></pre></td></tr></table></figure></p><p>操作完成后，Discourse 论坛基本配置完成，可以正常访问及发送邮件。</p><h2>几个规避操作</h2><p>创建管理员</p><p>如果邮件还是有问题，就没有办法使用管理员登陆论坛，此时，可以做一个规避操作。执行如下命令，进入 app，创建管理员。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./launcher enter app</span><br><span class="line">rake admin:create</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><p>切换通知邮箱地址</p><p>还可以手动切换邮箱地址，以此来绕过设置的 Discourse 邮件系统<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./launcher enter app</span><br><span class="line">rails r &quot;SiteSetting.notification_email = &apos;discourse@yoursite.com&apos;&quot;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><h2>troubleshooting</h2><p>进入 app 后，可以查看日志<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./launcher enter app</span><br><span class="line">cd /var/www/discourse/log</span><br><span class="line">tail -f production.log</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/20/搭建邮件服务器和论坛/6.jpg&quot; width=&quot;520&quot; height=&quot;520&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天一起来看看如何搭建自己的邮件服务器和论坛服务，使用的工具分别为 Ewomail 和 Discourse。&lt;/p&gt;
&lt;h1&gt;搭建邮件服务器&lt;/h1&gt;
&lt;p&gt;安装 Ewomail 还是很简单的，它支持一键式安装。
（重要，如果服务器上有其他软件，特别是 MySQL 时，请慎重安装！）&lt;/p&gt;
&lt;h2&gt;使用官网方法安装&lt;/h2&gt;
&lt;p&gt;直接使用官方文档安装即可（http://doc.ewomail.com/docs/ewomail/install），安装的时候，需要指定一个域名地址，地址就写自己申请的域名，或者安装之后再修改也是可以的。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/gyxuehu/EwoMail.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /root/EwoMail/install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#需要输入一个邮箱域名，不需要前缀，列如下面的ewomail.cn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh ./start.sh ewomail.cn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装之后，会有 iptables，如果其他服务的端口不可访问，记得来检查下 iptables。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="系统" scheme="https://blog.luobodazahui.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="系统" scheme="https://blog.luobodazahui.top/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Flask-JSGlue 库简介</title>
    <link href="https://blog.luobodazahui.top/2019/08/14/Flask-JSGlue-%E5%BA%93%E7%AE%80%E4%BB%8B/"/>
    <id>https://blog.luobodazahui.top/2019/08/14/Flask-JSGlue-库简介/</id>
    <published>2019-08-14T11:18:06.000Z</published>
    <updated>2019-08-14T11:23:40.011Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/08/14/Flask-JSGlue-库简介/Python.jpg" width="250" height="150"></p><p>今天介绍一个有用的胶水库，Flask-JSGlue，看它的名字，也基本可以看出是连接 Flask 和 JavaScript 的桥梁。我们先来看看它主要解决的问题</p><h1>问题</h1><p>使用 Flask 做 web 开发，不可避免的会遇到在 js 中处理 URL，而我们都知道，在 Flask 中使用 url_for 是很好的动态创建 url 的方式。举个栗子</p><p>在 HTML 中使用</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='chat/images/hi.jpg')&#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在 后台逻辑中使用</p><p><a id="more"></a></p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">'main.index'</span>))</span><br></pre></td></tr></table></figure></p><p>以上，都不会有什么问题。</p><h2>问题场景</h2><p>在页面加载完成之后，某些动作，会触发页面新增一些 HTML 代码，说起来比较抽象，还是看个栗子</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">event, from_name, to_uid, to_uname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg = $(<span class="string">"#message_not"</span>).val();</span><br><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> myTime = myDate.toLocaleTimeString();</span><br><span class="line"><span class="keyword">var</span> itTime = myDate.toLocaleString();</span><br><span class="line"><span class="keyword">var</span> htmlData =   <span class="string">'&lt;div class="msg_item fn-clear"&gt;'</span></span><br><span class="line">                   + <span class="string">'   &lt;div class="uface"&gt;&lt;img src="&#123;&#123; url_for('</span><span class="keyword">static</span><span class="string">', filename='</span>chat/images/hi.jpg<span class="string">')&#125;&#125;" width="40" height="40"  alt=""/&gt;&lt;/div&gt;'</span></span><br><span class="line">       + <span class="string">'   &lt;div class="item_right"&gt;'</span></span><br><span class="line">       + <span class="string">'     &lt;div class="msg own"&gt;'</span> + msg + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">       + <span class="string">'     &lt;div class="name_time"&gt;'</span> + from_name + <span class="string">' · '</span> + itTime +<span class="string">'&lt;/div&gt;'</span></span><br><span class="line">       + <span class="string">'   &lt;/div&gt;'</span></span><br><span class="line">       + <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">$(<span class="string">"#message_box"</span>).append(htmlData);</span><br><span class="line">$(<span class="string">'#message_box'</span>).scrollTop($(<span class="string">"#message_box"</span>)[<span class="number">0</span>].scrollHeight + <span class="number">20</span>);</span><br><span class="line">$(<span class="string">"#message_not"</span>).val(<span class="string">''</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;sendToServernoLogin(from_name, msg)&#125;, <span class="number">1000</span>); <span class="comment">//延时调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是我一个在线聊天室的 js 代码，在调用该函数后，会在 message_box 中增加一段 HTML 代码，用来展示用户发送的消息。</p><p>可以看到，在 htmlData 中，对于 img 标签，我用到了 url_for 函数来动态产生 URL，因为这个是用户的头像，很显然每个用户头像会有所不同，所以动态产生 URL 就是必须的了。</p><p>这样看起来还好，直接使用 url_for 编码到 HTML 代码中，也是可行的，下面我们再来看看另一种情况。</p><p>有一个类似如下形式的函数</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/nvshen/&lt;id&gt;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def nvshen(id):</span><br></pre></td></tr></table></figure></p><p>那么使用 url_for 函数就需要为如下形式</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(&quot;nvshen&quot;, id=123)</span><br></pre></td></tr></table></figure></p><p>下面再来看看如果也是需要写到 HTML 代码里呢</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var myid = mydata[i][2];</span><br><span class="line">var htmlText = '<span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"white-panel"</span>&gt;</span>' +</span><br><span class="line">   '<span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">' + myurl +'</span> <span class="attr">class</span>=<span class="string">"thumb"</span>&gt;</span>' +</span><br><span class="line">'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>' +</span><br><span class="line">'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('nvshen', id=myid)&#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"去投票"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>' +</span><br><span class="line">myname + '<span class="tag">&lt;/<span class="name">a</span>&gt;</span>' +</span><br><span class="line">'<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>' +</span><br><span class="line">'<span class="tag">&lt;<span class="name">p</span>&gt;</span>' +</span><br><span class="line">'<span class="tag">&lt;/<span class="name">p</span>&gt;</span>' +</span><br><span class="line">'<span class="tag">&lt;/<span class="name">article</span>&gt;</span>';</span><br></pre></td></tr></table></figure></p><p>类似上面的写法，我试过了各种方式，都不能正确传递 myid 的值，如果有哪位小伙伴知道解法的话，还请告知下。</p><h1>使用 Flask-JSGlue 解决</h1><p>我们先来看看 Flask-JSGlue 的官网，上面的例子也是非常的简单</p><p>后台逻辑</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_jsglue import JSGlue</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">jsglue = JSGlue(app)</span><br></pre></td></tr></table></figure></p><p>前端页面</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;&#123;&#123; JSGlue.include() &#125;&#125;&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">Flask.url_for(&quot;index&quot;)</span><br><span class="line"></span><br><span class="line">Flask.url_for(&quot;static&quot;, &#123;&quot;filename&quot;: &quot;jquery.min.js&quot;&#125;)</span><br><span class="line"></span><br><span class="line">Flask.url_for(&quot;api.hello_world&quot;, &#123;&quot;param1&quot;: 1, &quot;param2&quot;: &quot;text&quot;&#125;)</span><br><span class="line"></span><br><span class="line">Flask.url_for(&quot;api.external_link&quot;, &#123;&quot;_external&quot;: true, &quot;_scheme&quot;: &quot;https&quot;, &quot;_anchor&quot;: &quot;main&quot;&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>对于需要传递 url 参数的情况，也能够很好的支持，beautiful！</p></blockquote><h2>改写上面的 HTML 字符串</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&lt;a href=URL title=&quot;去投票&quot; target=&quot;_blank&quot;&gt;&apos;.replace(&quot;URL&quot;, Flask.url_for(&quot;nvshen&quot;, &#123;id: myid&#125;)) +</span><br></pre></td></tr></table></figure></p><p>完美解决</p><p>反正我是被惊艳到了，终于解决了我长久以来的困扰，香！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/14/Flask-JSGlue-库简介/Python.jpg&quot; width=&quot;250&quot; height=&quot;150&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天介绍一个有用的胶水库，Flask-JSGlue，看它的名字，也基本可以看出是连接 Flask 和 JavaScript 的桥梁。
我们先来看看它主要解决的问题&lt;/p&gt;
&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;使用 Flask 做 web 开发，不可避免的会遇到在 js 中处理 URL，而我们都知道，在 Flask 中使用 url_for 是很好的动态创建 url 的方式。举个栗子&lt;/p&gt;
&lt;p&gt;在 HTML 中使用&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; url_for(&#39;static&#39;, filename=&#39;chat/images/hi.jpg&#39;)&amp;#125;&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 后台逻辑中使用&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Flask" scheme="https://blog.luobodazahui.top/categories/Flask/"/>
    
    
      <category term="Flask" scheme="https://blog.luobodazahui.top/tags/Flask/"/>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用 Python 来理一理红楼梦里的那些关系</title>
    <link href="https://blog.luobodazahui.top/2019/08/13/%E7%94%A8-Python-%E6%9D%A5%E7%90%86%E4%B8%80%E7%90%86%E7%BA%A2%E6%A5%BC%E6%A2%A6%E9%87%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E5%85%B3%E7%B3%BB/"/>
    <id>https://blog.luobodazahui.top/2019/08/13/用-Python-来理一理红楼梦里的那些关系/</id>
    <published>2019-08-13T09:34:19.000Z</published>
    <updated>2019-08-13T09:38:33.606Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/08/13/用-Python-来理一理红楼梦里的那些关系/2.jpg"></p><p>今天，一起用 Python 来理一理红楼梦里的那些关系不要问我为啥是红楼梦，而不是水浒三国或西游，因为我也鉴定的认为，红楼才是无可争议的中国古典小说只巅峰，且不接受反驳！而红楼梦也是我多次反复品读的为数不多的小说，对它的感情也是最深的。好了，不酸了，开干。</p><p><a id="more"></a></p><h1>数据准备</h1><ol><li>红楼梦 TXT 文件一份</li><li>金陵十二钗 + 贾宝玉 人物名称列表人物列表内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">宝玉 nr</span><br><span class="line">黛玉 nr</span><br><span class="line">宝钗 nr</span><br><span class="line">湘云 nr</span><br><span class="line">凤姐 nr</span><br><span class="line">李纨 nr</span><br><span class="line">元春 nr</span><br><span class="line">迎春 nr</span><br><span class="line">探春 nr</span><br><span class="line">惜春 nr</span><br><span class="line">妙玉 nr</span><br><span class="line">巧姐 nr</span><br><span class="line">秦氏 nr</span><br></pre></td></tr></table></figure></li></ol><p>这份列表，同时也是为了做分词时使用，后面的 nr 就是人名的意思。</p><h1>数据处理</h1><h2>读取数据并加载词典</h2><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"红楼梦.txt"</span>, encoding=<span class="string">'gb18030'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    honglou = f.readlines()</span><br><span class="line">jieba.load_userdict(<span class="string">"renwu_forcut"</span>)</span><br><span class="line">renwu_data = pd.read_csv(<span class="string">"renwu_forcut"</span>, header=<span class="number">-1</span>)</span><br><span class="line">mylist = [k[<span class="number">0</span>].split(<span class="string">" "</span>)[<span class="number">0</span>] <span class="keyword">for</span> k <span class="keyword">in</span> renwu_data.values.tolist()]</span><br></pre></td></tr></table></figure></p><p>这样，我们就把红楼梦读取到了 honglou 这个变量当中，同时也通过 load_userdict 将我们自定义的词典加载到了 jieba 库中。</p><h2>对文本进行分词处理并提取</h2><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tmpNames = []</span><br><span class="line">    names = &#123;&#125;</span><br><span class="line">    relationships = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> honglou:</span><br><span class="line">        h.replace(<span class="string">"贾妃"</span>, <span class="string">"元春"</span>)</span><br><span class="line">        h.replace(<span class="string">"李宫裁"</span>, <span class="string">"李纨"</span>)</span><br><span class="line">        poss = pseg.cut(h)</span><br><span class="line">        tmpNames.append([])</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> poss:</span><br><span class="line">            <span class="keyword">if</span> w.flag != <span class="string">'nr'</span> <span class="keyword">or</span> len(w.word) != <span class="number">2</span> <span class="keyword">or</span> w.word <span class="keyword">not</span> <span class="keyword">in</span> mylist:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmpNames[<span class="number">-1</span>].append(w.word)</span><br><span class="line">            <span class="keyword">if</span> names.get(w.word) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                names[w.word] = <span class="number">0</span></span><br><span class="line">            relationships[w.word] = &#123;&#125;</span><br><span class="line">            names[w.word] += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><ul><li>首先，因为文中&quot;贾妃&quot;, &quot;元春&quot;，&quot;李宫裁&quot;, &quot;李纨&quot; 混用严重，所以这里直接做替换处理。</li><li>然后使用 jieba 库提供的 pseg 工具来做分词处理，会返回每个分词的词性。</li><li>之后做判断，只有符合要求且在我们提供的字典列表里的分词，才会保留。</li><li>一个人每出现一次，就会增加一，方便后面画关系图时，人物 node 大小的确定。</li><li>对于存在于我们自定义词典的人名，保存到一个临时变量当中 tmpNames。</li></ul><h2>处理人物关系</h2><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> tmpNames:</span><br><span class="line">    <span class="keyword">for</span> name1 <span class="keyword">in</span> name:</span><br><span class="line">        <span class="keyword">for</span> name2 <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">if</span> name1 == name2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> relationships[name1].get(name2) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                relationships[name1][name2] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                relationships[name1][name2] += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>对于出现在同一个段落中的人物，我们认为他们是关系紧密的，每同时出现一次，关系增加1.</p><h2>保存到文件</h2><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"relationship.csv"</span>, <span class="string">"w"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"Source,Target,Weight\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> name, edges <span class="keyword">in</span> relationships.items():</span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> edges.items():</span><br><span class="line">            f.write(name + <span class="string">","</span> + v + <span class="string">","</span> + str(w) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"NameNode.csv"</span>, <span class="string">"w"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"ID,Label,Weight\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> name, times <span class="keyword">in</span> names.items():</span><br><span class="line">        f.write(name + <span class="string">","</span> + name + <span class="string">","</span> + str(times) + <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure></p><ul><li>文件1：人物关系表，包含首先出现的人物、之后出现的人物和一同出现次数</li><li>文件2：人物比重表，包含该人物总体出现次数，出现次数越多，认为所占比重越大。</li></ul><h1>制作关系图表</h1><p>使用 pyecharts 作图<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_graph</span><span class="params">()</span>:</span></span><br><span class="line">    relationship_data = pd.read_csv(<span class="string">'relationship.csv'</span>)</span><br><span class="line">    namenode_data = pd.read_csv(<span class="string">'NameNode.csv'</span>)</span><br><span class="line">    relationship_data_list = relationship_data.values.tolist()</span><br><span class="line">    namenode_data_list = namenode_data.values.tolist()</span><br><span class="line"></span><br><span class="line">    nodes = []</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> namenode_data_list:</span><br><span class="line">        <span class="keyword">if</span> node[<span class="number">0</span>] == <span class="string">"宝玉"</span>:</span><br><span class="line">            node[<span class="number">2</span>] = node[<span class="number">2</span>]/<span class="number">3</span></span><br><span class="line">        nodes.append(&#123;<span class="string">"name"</span>: node[<span class="number">0</span>], <span class="string">"symbolSize"</span>: node[<span class="number">2</span>]/<span class="number">30</span>&#125;)</span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> relationship_data_list:</span><br><span class="line">        links.append(&#123;<span class="string">"source"</span>: link[<span class="number">0</span>], <span class="string">"target"</span>: link[<span class="number">1</span>], <span class="string">"value"</span>: link[<span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    g = (</span><br><span class="line">        Graph()</span><br><span class="line">        .add(<span class="string">""</span>, nodes, links, repulsion=<span class="number">8000</span>)</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">"红楼人物关系"</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure></p><ul><li>首先把两个文件读取成列表形式</li><li>对于“宝玉”，由于其占比过大，如果统一进行缩放，会导致其他人物的 node 过小，展示不美观，所以这里先做了一次缩放</li></ul><p>最后得出的关系图<img src="/2019/08/13/用-Python-来理一理红楼梦里的那些关系/1.png"></p><p>所有代码已经上传至 Github：</p><p>https://github.com/zhouwei713/data_analysis/tree/master/honglou</p><p>最后，我还准备了一份更加全面的红楼人物字典，可以在代码仓库中找到-“renwu_total”，感兴趣的小伙伴也可以尝试下，制作一个全人物的关系图。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/13/用-Python-来理一理红楼梦里的那些关系/2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天，一起用 Python 来理一理红楼梦里的那些关系
不要问我为啥是红楼梦，而不是水浒三国或西游，因为我也鉴定的认为，红楼才是无可争议的中国古典小说只巅峰，且不接受反驳！而红楼梦也是我多次反复品读的为数不多的小说，对它的感情也是最深的。
好了，不酸了，开干。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.luobodazahui.top/tags/Python/"/>
    
      <category term="数据分析" scheme="https://blog.luobodazahui.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>女神网站优化之分批返回数据及懒加载</title>
    <link href="https://blog.luobodazahui.top/2019/08/08/%E5%A5%B3%E7%A5%9E%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96%E4%B9%8B%E5%88%86%E6%89%B9%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E5%8F%8A%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://blog.luobodazahui.top/2019/08/08/女神网站优化之分批返回数据及懒加载/</id>
    <published>2019-08-08T12:16:08.000Z</published>
    <updated>2019-08-08T12:21:32.179Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/08/08/女神网站优化之分批返回数据及懒加载/fengmian.png"></p><p>作为一个手残的外行前端 coder，今天因为需要，研究了下瀑布延时加载和图片的懒加载，做个总结，免得以后忘记了！</p><h1>瀑布流</h1><p>最近做了一个图片网站，采用的是瀑布流的布局效果，大致如下：</p><p><img src="/2019/08/08/女神网站优化之分批返回数据及懒加载/nvshen1.gif"></p><p>看起来效果还不错，但是问题却来了，首页这里，每次 loading 都会一次性加载200+图片，我的天啊。如果赶上网速不好的时候，会导致其他网页也无法打开。这个真实没法忍，于是我准备优化一下。</p><h1>下拉加载</h1><p>很容易，我自然而然的就想到了采用下拉的形式，每次加载一部分数据，那么说干就干。</p><p><a id="more"></a></p><h2>改造后台</h2><p>最开始，我的后台代码是一次性把所有数据都返回给前端，现在把数据分成4分，首次进入首页时，只返回第一份<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    db = get_db()</span><br><span class="line">    cur = db.execute(<span class="string">'select name, nvshen_id from nvshen order by id desc'</span>)</span><br><span class="line">    nvshen = [dict(name=row[<span class="number">0</span>], nvshen_id=row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> cur.fetchall()]</span><br><span class="line">    seg = int(len(nvshen)/<span class="number">4</span>)</span><br><span class="line">    data = []</span><br><span class="line">    socre = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nvshen[:seg]:</span><br><span class="line">        tmp_data = []</span><br><span class="line">        pic = db.execute(<span class="string">'select pic_url from picture where nvshen_id = (?)'</span>, [n[<span class="string">'nvshen_id'</span>]])</span><br><span class="line">        pic_list = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> pic.fetchall()]</span><br><span class="line">        pic_url = random.choice(pic_list)</span><br><span class="line">        tmp_data.append(n[<span class="string">'name'</span>])</span><br><span class="line">        tmp_data.append(pic_url)</span><br><span class="line">        tmp_data.append(n[<span class="string">'nvshen_id'</span>])</span><br><span class="line">        data.append(tmp_data)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, data=data, score=socre)</span><br></pre></td></tr></table></figure></p><p>然后再写一个获取数据的接口，参数就是 page<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/api/getdata/&lt;int:page&gt;', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(page)</span>:</span></span><br><span class="line">    db = get_db()</span><br><span class="line">    cur = db.execute(<span class="string">'select name, nvshen_id from nvshen order by id desc'</span>)</span><br><span class="line">    nvshen = [dict(name=row[<span class="number">0</span>], nvshen_id=row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> cur.fetchall()]</span><br><span class="line">    seg = <span class="number">0</span></span><br><span class="line">    seg_page = int(len(nvshen)/<span class="number">4</span>)</span><br><span class="line">    end = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> page == <span class="number">2</span>:</span><br><span class="line">        seg = seg_page</span><br><span class="line">        seg_page = seg*<span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> page == <span class="number">3</span>:</span><br><span class="line">        seg = seg_page*<span class="number">2</span></span><br><span class="line">        seg_page = seg*<span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> page == <span class="number">4</span>:</span><br><span class="line">        seg = seg_page*<span class="number">3</span></span><br><span class="line">        seg_page = int(len(nvshen)) + <span class="number">1</span></span><br><span class="line">        end = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> page == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">"msg"</span>: <span class="string">"error page id"</span>, <span class="string">"code"</span>: <span class="number">422</span>&#125;), <span class="number">422</span></span><br><span class="line">    data = []</span><br><span class="line">    socre = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nvshen[seg:seg_page]:</span><br><span class="line">        tmp_data = []</span><br><span class="line">        pic = db.execute(<span class="string">'select pic_url from picture where nvshen_id = (?)'</span>, [n[<span class="string">'nvshen_id'</span>]])</span><br><span class="line">        pic_list = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> pic.fetchall()]</span><br><span class="line">        pic_url = random.choice(pic_list)</span><br><span class="line">        tmp_data.append(n[<span class="string">'name'</span>])</span><br><span class="line">        tmp_data.append(pic_url)</span><br><span class="line">        tmp_data.append(n[<span class="string">'nvshen_id'</span>])</span><br><span class="line">        data.append(tmp_data)</span><br><span class="line">    print(<span class="string">"getdata: "</span>, data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">"msg"</span>: data, <span class="string">"code"</span>: <span class="number">200</span>, <span class="string">"end"</span>: end&#125;), <span class="number">200</span></span><br></pre></td></tr></table></figure></p><blockquote><p>因为当前只是把数据分成4分，所以当 page 为4的时候，就把停止信号 end 设置为 True，这样前端判断这个信号就可以判断什么时候停止请求数据了。</p></blockquote><h2>改造前端</h2><p>先写一个用户获取数据的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/api/getdata/'</span> + page, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">//console.log(this.response);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.response[<span class="string">'end'</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//console.log("end is true");</span></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> mydata = <span class="keyword">this</span>.response[<span class="string">'msg'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, len=mydata.length; i&lt;len; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> myurl = mydata[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> myid = mydata[i][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> myname = mydata[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> htmlText = <span class="string">'&lt;article class="white-panel"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;img data-src='</span> + myurl +<span class="string">' class="thumb"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;h1&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;a href=URL title="去投票" target="_blank"&gt;'</span>.replace(<span class="string">"URL"</span>, Flask.url_for(<span class="string">"nvshen"</span>, &#123;<span class="attr">id</span>: myid&#125;)) +</span><br><span class="line"> myname + <span class="string">'&lt;/a&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/h1&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;p&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;div id="starBg" class="stars-bg"&gt;'</span> +</span><br><span class="line"><span class="string">'&#123;% if score == 1 %&#125;'</span> +</span><br><span class="line"><span class="string">'&lt;a href="#" class="star-active" style="width: 20%"&gt;&lt;/a&gt;'</span> +</span><br><span class="line"><span class="string">'&#123;% elif score == 2 %&#125;'</span> +</span><br><span class="line"><span class="string">'&lt;a href="#" class="star-active" style="width: 40%"&gt;&lt;/a&gt;'</span> +</span><br><span class="line"><span class="string">'&#123;% elif score == 3 %&#125;'</span> +</span><br><span class="line"><span class="string">'&lt;a href="#" class="star-active" style="width: 60%"&gt;&lt;/a&gt;'</span> +</span><br><span class="line"><span class="string">'&#123;% elif score == 4 %&#125;'</span> +</span><br><span class="line"><span class="string">'&lt;a href="#" class="star-active" style="width: 80%"&gt;&lt;/a&gt;'</span> +</span><br><span class="line"><span class="string">'&#123;% elif score == 5 %&#125;'</span> +</span><br><span class="line"><span class="string">'&lt;a href="#" class="star-active" style="width: 100%"&gt;&lt;/a&gt;'</span> +</span><br><span class="line"><span class="string">'&#123;% else %&#125;'</span> +</span><br><span class="line"><span class="string">'&lt;a href="#" class="star-active" style="width: 0%"&gt;&lt;/a&gt;'</span> +</span><br><span class="line"><span class="string">'&#123;% endif %&#125;'</span> +</span><br><span class="line"><span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/p&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/article&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> script = <span class="string">'&lt;script&gt;'</span> +</span><br><span class="line"><span class="string">'$(function()&#123;'</span> +</span><br><span class="line"><span class="string">'$("img.thumb").lazyload();'</span> +</span><br><span class="line"><span class="string">'&#125;)'</span> +</span><br><span class="line"><span class="string">'&lt;\/script&gt;'</span>;</span><br><span class="line">$(<span class="string">'#gallery-wrapper'</span>).append(htmlText);</span><br><span class="line">$(<span class="string">'body'</span>).append(script);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console.log("add new html finish");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>主要还是拼接字符串，然后把获取到的数据塞进字符串中。</p></blockquote><p><strong>flask_jsglue</strong></p><p>这里不得不提一下 flask 的一个插件 --flask_jsglue对于在 JavaScript 中使用 url_for 函数真的是太好用了，感兴趣的同学可以自行去看看，非常的简单好用。</p><p>然后就是下拉的逻辑了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> totalHeight = $(<span class="built_in">document</span>).height(); <span class="comment">//整个文档高度</span></span><br><span class="line"><span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop();<span class="comment">//浏览器可视窗口顶端距离网页顶端的高度（垂直偏移）</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">scrollTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"totalHeight-scrollTop-$(this).height()"</span>, totalHeight-scrollTop-$(<span class="keyword">this</span>).height());</span><br><span class="line">totalHeight = $(<span class="built_in">document</span>).height();</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">if</span>(totalHeight-scrollTop-$(<span class="keyword">this</span>).height()&lt;<span class="number">0.5</span>)&#123;</span><br><span class="line"><span class="comment">//console.log("add new html");</span></span><br><span class="line">getData(p);</span><br><span class="line">p ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>因为我们再进入首页的时候，已经返回了数据的第一部分，所以这里的 page 就从2开始取值；然后当整个文档的高度减去垂直偏移量，再减去浏览器可是窗口的高度小于0.5时，则调用拉取数据的函数，并且 p 自加1.</p></blockquote><h1>图片懒加载</h1><p>对于图片懒加载，就比较简单了，有现成的组件库可以使用。首先引入类库<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://rawgit.com/tuupola/jquery_lazyload/2.x/lazyload.js"</span> type=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后修改 img 元素的图片地址属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumb"</span> data-src=<span class="string">"&#123;&#123; p[1] &#125;&#125;"</span>&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>我们一般会把图片地址赋值给 src，现在我们赋值给 data-src。</p></blockquote><p>最后，在页面全局写一个函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="string">"img.thumb"</span>).lazyload();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>这样，就能保证图片只要当页面滚动到它的位置时才加载了。</p><p>最后再提供下网站地址，供大家参考https://nvshen.luobodazahui.top</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/08/女神网站优化之分批返回数据及懒加载/fengmian.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;作为一个手残的外行前端 coder，今天因为需要，研究了下瀑布延时加载和图片的懒加载，做个总结，免得以后忘记了！&lt;/p&gt;
&lt;h1&gt;瀑布流&lt;/h1&gt;
&lt;p&gt;最近做了一个图片网站，采用的是瀑布流的布局效果，大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/08/女神网站优化之分批返回数据及懒加载/nvshen1.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;看起来效果还不错，但是问题却来了，首页这里，每次 loading 都会一次性加载200+图片，我的天啊。如果赶上网速不好的时候，会导致其他网页也无法打开。这个真实没法忍，于是我准备优化一下。&lt;/p&gt;
&lt;h1&gt;下拉加载&lt;/h1&gt;
&lt;p&gt;很容易，我自然而然的就想到了采用下拉的形式，每次加载一部分数据，那么说干就干。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="前端杂记" scheme="https://blog.luobodazahui.top/categories/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Flask" scheme="https://blog.luobodazahui.top/tags/Flask/"/>
    
      <category term="JavaScript" scheme="https://blog.luobodazahui.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>没有忍住，还是用Python爬了N多个女神</title>
    <link href="https://blog.luobodazahui.top/2019/08/05/%E6%B2%A1%E6%9C%89%E5%BF%8D%E4%BD%8F%EF%BC%8C%E8%BF%98%E6%98%AF%E7%94%A8Python%E7%88%AC%E4%BA%86N%E5%A4%9A%E4%B8%AA%E5%A5%B3%E7%A5%9E/"/>
    <id>https://blog.luobodazahui.top/2019/08/05/没有忍住，还是用Python爬了N多个女神/</id>
    <published>2019-08-05T10:42:33.000Z</published>
    <updated>2019-08-05T12:31:26.497Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/nvshen11.png"></p><p>学 Python，从爬女神开始啥也不说，今天是来送福利的</p><h1>女神大会</h1><p>不是知道有多少人知道“懂球帝”这个 APP（网站），又有多少人关注过它的一个栏目“女神大会”，在这里，没有足球，只有女神哦。画风是这样的<img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/1.png"></p><p>女神评分，全部是由球迷来决定，是不是很赤鸡，下面就一起来看看球迷眼中女神排名吧。</p><p><a id="more"></a></p><h1>开工</h1><h2>获取 ID 信息</h2><p>首先，我们可以通过抓取懂球帝 APP 的网络请求，拿到一个 API，http://api.dongqiudi.com/search?keywords=type=all&amp;page=该 API ，我们能够拿到如下信息<img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/4.png">我们主要关注 ID 和 thumb，ID 后面用来拼接女神所在页面的 HTML 地址，thumb 就用来收藏。</p><p><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/huaixiao.jpg"></p><p>于是，我们就可以得到一个简单的解析函数</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_list</span><span class="params">(page)</span>:</span></span><br><span class="line">    nvshen_id_list = []</span><br><span class="line">    nvshen_id_picture = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, page):</span><br><span class="line">        print(<span class="string">"获取第"</span> + str(i) + <span class="string">"页数据"</span>)</span><br><span class="line">        url = <span class="string">'http://api.dongqiudi.com/search?keywords=%E5%A5%B3%E7%A5%9E%E5%A4%A7%E4%BC%9A&amp;type=all&amp;page='</span> + str(i)</span><br><span class="line">        html = requests.get(url=url).text</span><br><span class="line">        news = json.loads(html)[<span class="string">'news'</span>]</span><br><span class="line">        <span class="keyword">if</span> len(news) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"没有更多啦"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        nvshen_id = [k[<span class="string">'id'</span>] <span class="keyword">for</span> k <span class="keyword">in</span> news]</span><br><span class="line">        nvshen_id_list = nvshen_id_list + nvshen_id</span><br><span class="line">        nvshen_id_picture = nvshen_id_picture + [&#123;k[<span class="string">'id'</span>]: k[<span class="string">'thumb'</span>]&#125; <span class="keyword">for</span> k <span class="keyword">in</span> news]</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> nvshen_id_list, nvshen_id_picture</span><br></pre></td></tr></table></figure></p><h2>下载 HTML 页面</h2><p>接下来，通过观察，我们能够得到，每个女神所在的页面地址都是这样的，</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.dongqiudi.com/archive/**.html</span><br></pre></td></tr></table></figure></p><p>其中 ** 就是上面拿到的 ID 值，那么获取 HTML 页面的代码也就有了</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_page</span><span class="params">(nvshen_id_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nvshen_id_list:</span><br><span class="line">        print(<span class="string">"正在下载ID为"</span> + i + <span class="string">"的HTML网页"</span>)</span><br><span class="line">        url = <span class="string">'https://www.dongqiudi.com/archive/%s.html'</span> % i</span><br><span class="line">        download = DownloadPage()</span><br><span class="line">        html = download.getHtml(url)</span><br><span class="line">        download.saveHtml(i, html)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadPage</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        html = requests.get(url=url).content</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">saveHtml</span><span class="params">(self, file_name, file_content)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'html_page/'</span> + file_name + <span class="string">'.html'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(file_content)</span><br></pre></td></tr></table></figure></p><blockquote><p>防止访问限制，每次请求都做了2秒的等待</p></blockquote><p>但是，问题来了当我直接请求这个页面的时候，竟然是这样的</p><p><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/5.png"></p><p>被（悲）拒（剧）了<img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/zhenjing.jpg">没办法，继续斗争。重新分析，发现请求中有携带一个 cookie，哈哈，这个我们已经轻车熟路啦对 requests 请求增加 cookie，同时再把 headers 里面增加个 User-Agent，再试</p><p><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/6.png"></p><p>成了！</p><p><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/7.png"></p><h2>解析本地 HTML</h2><p>最后，就是解析下载到本地的 HTML 页面了，页面的规则就是，本期女神介绍页面，会公布上期女神的综合得分，而我们的主要任务就是获取各个女神的得分<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_loaclfile</span><span class="params">(nvshen_id_picture)</span>:</span></span><br><span class="line">    files = os.listdir(<span class="string">'html_page/'</span>)</span><br><span class="line">    nvshen_list = []</span><br><span class="line">    special_page = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> f[<span class="number">-4</span>:] == <span class="string">'html'</span> <span class="keyword">and</span> <span class="keyword">not</span> f.startswith(<span class="string">'~'</span>):</span><br><span class="line">            htmlfile = open(<span class="string">'html_page/'</span> + f, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>).read()</span><br><span class="line">            content = BeautifulSoup(htmlfile, <span class="string">'html.parser'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                tmp_list = []</span><br><span class="line">                nvshen_name = content.find(text=re.compile(<span class="string">"上一期女神"</span>))</span><br><span class="line">                <span class="keyword">if</span> nvshen_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                nvshen_name_new = re.findall(<span class="string">r"女神(.+?)，"</span>, nvshen_name)</span><br><span class="line">                nvshen_count = re.findall(<span class="string">r"超过(.+?)人"</span>, nvshen_name)</span><br><span class="line">                tmp_list.append(<span class="string">''</span>.join(nvshen_name_new))</span><br><span class="line">                tmp_list.append(<span class="string">''</span>.join(nvshen_count))</span><br><span class="line">                tmp_list.append(f[:<span class="number">-4</span>])</span><br><span class="line">                tmp_score = content.find_all(<span class="string">'span'</span>, attrs=&#123;<span class="string">'style'</span>: <span class="string">"color:#ff0000"</span>&#125;)</span><br><span class="line">                tmp_score = list(filter(<span class="literal">None</span>, [k.string <span class="keyword">for</span> k <span class="keyword">in</span> tmp_score]))</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">in</span> tmp_score[<span class="number">0</span>]:</span><br><span class="line">                    <span class="keyword">if</span> len(tmp_score[<span class="number">0</span>]) &gt; <span class="number">3</span>:</span><br><span class="line">                        tmp_list.append(<span class="string">''</span>.join(list(filter(str.isdigit, tmp_score[<span class="number">0</span>].strip()))))</span><br><span class="line">                        nvshen_list = nvshen_list + get_picture(content, tmp_list, nvshen_id_picture)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        tmp_list.append(tmp_score[<span class="number">0</span>])</span><br><span class="line">                        nvshen_list = nvshen_list + get_picture(content, tmp_list, nvshen_id_picture)</span><br><span class="line">                <span class="keyword">elif</span> len(tmp_score) &gt; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">in</span> tmp_score[<span class="number">1</span>]:</span><br><span class="line">                        <span class="keyword">if</span> len(tmp_score[<span class="number">1</span>]) &gt; <span class="number">3</span>:</span><br><span class="line">                            tmp_list.append(<span class="string">''</span>.join(list(filter(str.isdigit, tmp_score[<span class="number">1</span>].strip()))))</span><br><span class="line">                            nvshen_list = nvshen_list + get_picture(content, tmp_list, nvshen_id_picture)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            tmp_list.append(tmp_score[<span class="number">1</span>])</span><br><span class="line">                            nvshen_list = nvshen_list + get_picture(content, tmp_list, nvshen_id_picture)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        special_page.append(f)</span><br><span class="line">                        print(<span class="string">"拿不到score的HTML："</span>, f)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    special_page.append(f)</span><br><span class="line">                    print(<span class="string">"拿不到score的HTML："</span>, f)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">"解析出错的HTML："</span>, f)</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">return</span> nvshen_list, special_page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_picture</span><span class="params">(c, t_list, n_id_p)</span>:</span></span><br><span class="line">    print(<span class="string">"进入get_picture函数:"</span>)</span><br><span class="line">    nvshen_l = []</span><br><span class="line">    tmp_prev_id = c.find_all(<span class="string">'a'</span>, attrs=&#123;<span class="string">"target"</span>: <span class="string">"_self"</span>&#125;)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tmp_prev_id:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'期'</span> <span class="keyword">in</span> j.string:</span><br><span class="line">            href_list = j[<span class="string">'href'</span>].split(<span class="string">'/'</span>)</span><br><span class="line">            tmp_id = re.findall(<span class="string">r"\d+\.?\d*"</span>, href_list[<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">if</span> len(tmp_id) == <span class="number">1</span>:</span><br><span class="line">                prev_nvshen_id = tmp_id[<span class="number">0</span>]</span><br><span class="line">                t_list.append(prev_nvshen_id)</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> n_id_p:</span><br><span class="line">                    <span class="keyword">for</span> k, v <span class="keyword">in</span> n.items():</span><br><span class="line">                        <span class="keyword">if</span> k == prev_nvshen_id:</span><br><span class="line">                            t_list.append(v)</span><br><span class="line">                            print(<span class="string">"t_list"</span>, t_list)</span><br><span class="line">                            nvshen_l.append(t_list)</span><br><span class="line">                            print(<span class="string">"get_picture函数结束"</span>)</span><br><span class="line">                            <span class="keyword">return</span> nvshen_l</span><br></pre></td></tr></table></figure></p><h2>保存数据</h2><p>对于我们最后解析出来的数据，我们直接保存到 csv 文件中，如果数据量比较大的话，还可以考虑保存到 mongodb 中。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_file</span><span class="params">(nvshen_list, filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename + <span class="string">'.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> output:</span><br><span class="line">        output.write(<span class="string">'name,count,score,weight_score,page_id,picture\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> nvshen_list:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                weight = int(<span class="string">''</span>.join(list(filter(str.isdigit, row[<span class="number">1</span>])))) / <span class="number">1000</span></span><br><span class="line">                weight_2 = float(row[<span class="number">2</span>]) + float(<span class="string">'%.2f'</span> % weight)</span><br><span class="line">                weight_score = float(<span class="string">'%.2f'</span> % weight_2)</span><br><span class="line">                rowcsv = <span class="string">'&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;'</span>.format(row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">3</span>], weight_score, row[<span class="number">4</span>], row[<span class="number">5</span>])</span><br><span class="line">                output.write(rowcsv)</span><br><span class="line">                output.write(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br></pre></td></tr></table></figure></p><blockquote><p>对于女神的得分，又根据打分的人数，做了个加权分数</p></blockquote><p>保存图片<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_pic</span><span class="params">(url, nick_name)</span>:</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'picture'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'picture'</span>)</span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'picture'</span> + <span class="string">f'/<span class="subst">&#123;nick_name&#125;</span>.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content)</span><br></pre></td></tr></table></figure></p><blockquote><p>直接从拿到的 thumb 地址中下载图片，并保存到本地。</p></blockquote><h1>做一些图</h1><p>首先我们先做一个柱状图，看看排名前10和倒数前10的情况<img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/8.png">可以看到，朱茵、石川恋和高圆圆位列三甲，而得分高达95+的女神也有7位之多。那么排名后10位的呢，自行看吧，有没有人感到有点扎心呢，哈哈哈。同时，也能够从打分的人数来看出，人气高的女神，普遍得分也不低哦。不过，该排名目前只代表球迷心目中的榜单，不知道程序猿心中的榜单会是怎样的呢<img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/touxiao.gif"></p><p><strong>词云</strong><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/9.png"></p><p><strong>图片墙</strong><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/11.png"></p><p>不要流口水哦</p><p><img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/liukoushui.gif"></p><h1>百度 API 评分</h1><p>百度有免费的人脸检测 API，只要输入图片，就能够得到对应的人脸得分，还是非常方便的，感兴趣的小伙伴可以去官网看看哦。我这里直接给出了我通过百度 API 得出的女神新得分，一起来看看吧<img src="/2019/08/05/没有忍住，还是用Python爬了N多个女神/10.png">哈哈哈哈，AI 的评分，对于图片的依赖太高，纯属娱乐。</p><p>代码地址：https://github.com/zhouwei713/data_analysis/tree/master/nvshendahui</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/05/没有忍住，还是用Python爬了N多个女神/nvshen11.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;学 Python，从爬女神开始
啥也不说，今天是来送福利的&lt;/p&gt;
&lt;h1&gt;女神大会&lt;/h1&gt;
&lt;p&gt;不是知道有多少人知道“懂球帝”这个 APP（网站），又有多少人关注过它的一个栏目“女神大会”，在这里，没有足球，只有女神哦。
画风是这样的
&lt;img src=&quot;/2019/08/05/没有忍住，还是用Python爬了N多个女神/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;女神评分，全部是由球迷来决定，是不是很赤鸡，下面就一起来看看球迷眼中女神排名吧。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://blog.luobodazahui.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>微博内容及评论自动爬取</title>
    <link href="https://blog.luobodazahui.top/2019/08/01/%E5%BE%AE%E5%8D%9A%E5%86%85%E5%AE%B9%E5%8F%8A%E8%AF%84%E8%AE%BA%E8%87%AA%E5%8A%A8%E7%88%AC%E5%8F%96/"/>
    <id>https://blog.luobodazahui.top/2019/08/01/微博内容及评论自动爬取/</id>
    <published>2019-08-01T11:13:25.000Z</published>
    <updated>2019-08-01T12:34:03.431Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/08/01/微博内容及评论自动爬取/spider.jpg"></p><p>今天呢，继续撸微博，希望新浪的大神们不在啊啊啊。</p><p><strong>缘起</strong></p><p>昨天写了一篇文章，主要是有感于文章马伊琍的婚姻，才爬了下他们微博下的评论，结果有位老哥说<img src="/2019/08/01/微博内容及评论自动爬取/1.png">这还了得，我这小暴脾气不能忍啊，果断准备再次出手，拿下姐姐的微博评论。但是当我把瓜子都买好的时候。。。正当我准备再次 F12 查 ID，造 URL 的时候，作为一名非专业码农的惰性就体现出来了，每次都这么搞，是不是有点太繁琐了。于是，作为各类轮子的深度依赖者，这次我准备自己造个轮子。</p><p><a id="more"></a></p><h1>设想</h1><ol><li>最起码是一个自动抓取的脚本，嗯，这是底线！</li><li>有个入口输入要爬取的人物（当前设定为大 V，和搜索到的第一个人）</li><li>之后，就交给程序，坐等数据</li></ol><h1>思路</h1><p>于是乎，在上述设想的指引下，我开始了轮子之旅</p><h2>抓取入口</h2><p>首先想到的就是利用微博的搜索功能，然后再看看能得到些啥这个搜索 URL：</p><p>https://s.weibo.com/user?q=林志玲</p><p>可以直接调，爽的飞起！具体分析过程就不详细写了，从中我们可以拿到用户的 UID，很重要。</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://s.weibo.com/user?q=林志玲'</span></span><br><span class="line">res = requests.get(url).text</span><br><span class="line">content = BeautifulSoup(res, <span class="string">'html.parser'</span>)</span><br><span class="line">user = content.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'card card-user-b s-pg16 s-brt1'</span>&#125;)</span><br><span class="line"></span><br><span class="line">user_info = user.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'info'</span>&#125;).find(<span class="string">'div'</span>)</span><br><span class="line">href_list = user_info.find_all(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(href_list) == <span class="number">3</span>:</span><br><span class="line">    title = href_list[<span class="number">1</span>].get(<span class="string">'title'</span>)</span><br><span class="line">    <span class="keyword">if</span> title == <span class="string">'微博个人认证'</span>:</span><br><span class="line">        uid = href_list[<span class="number">2</span>].get(<span class="string">'uid'</span>)</span><br><span class="line">        print(uid)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"this is not a big VIP"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>因为这种搜索，可能会搜索出很多结果，张三、李四啥的都出来了，我们只关心大 V ，对于非大 V，就取第一个喽。</p></blockquote><h2>两次调用</h2><p>下面要隆重解释一个 URL</p><p>https://m.weibo.cn/api/container/getIndex</p><p>这个地址可以在微博的 m 站上找到，有时候，爬 m 站的地址要更容易些哦。这个地址，我们主要有两个作用，使用不同的参数，调用两次</p><h3>调用一</h3><p>首先我们这样调用该 URL</p><p>https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=1312412824</p><blockquote><p>value 为上面拿到的用户 UID</p></blockquote><p>看 Postman<img src="/2019/08/01/微博内容及评论自动爬取/2.png">能得到该用户的用户信息，这里面有一个很重要的信息，containerid，保存下来，一会用。</p><h3>调用二</h3><p>接着我们再这样调用该 URL</p><p>https://m.weibo.cn/api/container/getIndex?containerid=1076031312412824&amp;page=0</p><blockquote><p>containerid 就是上一步得到的 ID</p></blockquote><p>继续看 Postman<img src="/2019/08/01/微博内容及评论自动爬取/3.png">得到的就是 blog 信息了，返回的是 json 数据，很棒。</p><p>最后，我们可以再结合前面文章的获取评论的方法，那么该用户下的博客和评论内容就都到手喽。</p><h1>开搞</h1><p>此处先省去菜鸟被虐的一万点伤害值<img src="/2019/08/01/微博内容及评论自动爬取/4.jpg">其中的千辛万苦，谁能知之。</p><h2>一、配置文件</h2><p>先来个配置文件，毕竟大型项目都是这么玩的，我这也是大型项目<img src="/2019/08/01/微博内容及评论自动爬取/5.gif"></p><p>config.py 文件</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sleep_time = <span class="number">5</span>  <span class="comment"># 延迟时间，建议配置5-10s</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"Cookie"</span>: <span class="string">"your cookie"</span></span><br><span class="line">    &#125;</span><br><span class="line">day = <span class="number">60</span>  <span class="comment"># 最久抓取的微博时间，60即为只抓取两个月前到现在的微博</span></span><br></pre></td></tr></table></figure></p><h2>二、工具箱</h2><p>抽象出一些公共的函数，不能把代码写的太丑了</p><p>tools.py 文件</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkTime</span><span class="params">(inputtime, day)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        intime = datetime.datetime.strptime(<span class="string">"2019-"</span> + inputtime, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"时间转换失败"</span></span><br><span class="line"></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    n_days = now - intime</span><br><span class="line">    days = n_days.days</span><br><span class="line">    <span class="keyword">if</span> days &lt; day:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><blockquote><p>这个是用来检查时间间隔的，后面在抓取微博时，如果时间太久远的，就不抓了。</p></blockquote><p>还有一个函数是用来解析 blog 数据的，因为是 json 数据，解析起来很简单，就不多说了<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_blog_info</span><span class="params">(cards, i, name, page)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><h2>三、主逻辑</h2><p>定义一个 WeiBo 类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class WeiBo(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, headers):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.headers = headers</span><br></pre></td></tr></table></figure></p><blockquote><p>后面所有的操作，都是基于该类来的</p></blockquote><p>类中的方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_uid</span><span class="params">(self)</span>:</span>  <span class="comment"># 获取用户的 UID</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_userinfo</span><span class="params">(self, uid)</span>:</span>  <span class="comment"># 获取用户信息，包括 containerid</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_blog_by_page</span><span class="params">(self, containerid, page, name)</span>:</span>  <span class="comment"># 获取 page 页的微博信息</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_blog_by_text</span><span class="params">(self, containerid, blog_text, name)</span>:</span>  <span class="comment"># 一个简单的搜索功能，根据输入的内容查找对应的微博</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comment</span><span class="params">(self, mblog_id, page)</span>:</span>  <span class="comment"># 与上个函数配合使用，用于获取某个微博的评论</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_comment</span><span class="params">(self, comment)</span>:</span>  <span class="comment"># 下载评论</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_pic</span><span class="params">(self)</span>:</span>  <span class="comment"># 灵感来源于“胖虎”哥的“营养快线”文章，暂未实现</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2>四、运行函数</h2><p>这里个人感觉逻辑写的还是有点臃肿，没办法，菜！各位大神如果路过，还请不要嫌弃。主要就是配合 input 函数，来获取用户的输入，然后根据不同情况调取 WeiBo 类里的方法。</p><p>至此，一个勉强可用的轮子基本完成了，可把我累（牛）坏（逼）了（坏）啦（了）<img src="/2019/08/01/微博内容及评论自动爬取/6.jpg"></p><h3>成果展示</h3><p>扯了这么多，终于到了见成果的时候了，先来看个动图<img src="/2019/08/01/微博内容及评论自动爬取/7.gif">网络上爆炸的“乔碧萝殿下”，成为了我检（祭）验（刀）的第一人<img src="/2019/08/01/微博内容及评论自动爬取/8.jpg"></p><p>那么最后还是要扣题呀，把那段缘结束掉。看看志玲姐姐微博下的评论，到底是咋样其实拿到评论数据之后，简单浏览了下，确实有很多难以启齿的评论，但是呢，这个事情我觉得还是没有必要太上纲上线了，哈哈哈，总之祝福吧<img src="/2019/08/01/微博内容及评论自动爬取/zhiling.png">（此处请自动过滤掉一些些不和谐因素）</p><p>下面，前方，高能，<img src="/2019/08/01/微博内容及评论自动爬取/9.jpg">前方是大型认亲现场，怕引起不适的请跳过。<img src="/2019/08/01/微博内容及评论自动爬取/qiaobiluo.png">持续发酵的事件背后，产生了各种赢家，斗鱼平台、主播晴子，当然还有 CXK 喽，不能说了<img src="/2019/08/01/微博内容及评论自动爬取/10.jpg"></p><p>最后的最后，献上代码：</p><p><a href="https://github.com/zhouwei713/weibo_spider" target="_blank" rel="noopener">https://github.com/zhouwei713/weibo_spider</a></p><p>完！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/01/微博内容及评论自动爬取/spider.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天呢，继续撸微博，希望新浪的大神们不在啊啊啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缘起&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;昨天写了一篇文章，主要是有感于文章马伊琍的婚姻，才爬了下他们微博下的评论，结果有位老哥说
&lt;img src=&quot;/2019/08/01/微博内容及评论自动爬取/1.png&quot;&gt;
这还了得，我这小暴脾气不能忍啊，果断准备再次出手，拿下姐姐的微博评论。但是当我把瓜子都买好的时候。。。
正当我准备再次 F12 查 ID，造 URL 的时候，作为一名非专业码农的惰性就体现出来了，每次都这么搞，是不是有点太繁琐了。于是，作为各类轮子的深度依赖者，这次我准备自己造个轮子。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://blog.luobodazahui.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="微博" scheme="https://blog.luobodazahui.top/tags/%E5%BE%AE%E5%8D%9A/"/>
    
  </entry>
  
  <entry>
    <title>基于矩阵分解算法的推荐系统实战</title>
    <link href="https://blog.luobodazahui.top/2019/07/30/%E5%9F%BA%E4%BA%8E%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3%E7%AE%97%E6%B3%95%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/"/>
    <id>https://blog.luobodazahui.top/2019/07/30/基于矩阵分解算法的推荐系统实战/</id>
    <published>2019-07-30T13:05:52.000Z</published>
    <updated>2019-07-31T10:40:53.262Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/07/30/基于矩阵分解算法的推荐系统实战/jiqixuexi.jpg"></p><p>基于矩阵分解算法的图书推荐系统实战</p><h1>推荐系统</h1><p>推荐系统，可以根据用户的喜好来推荐给用户不同的事物。</p><p>推荐系统类型：</p><ol><li>纯手工设置推荐内容</li><li>根据物品的销量，曝光率等来排序物品，并推荐给用户</li><li>根据不同的算法，整合不同维度的数据，来智能的推荐物品</li></ol><h2>简单的推荐系统模型</h2><p>设：U 为所有用户集合P 为所有物品集合R 为用户对物品的喜好程度模型 Model(R) = U * P算法核心：</p><p><a id="more"></a></p><p>通过用户对不同物品的打分，来预测用户对其他物品的喜好程度。此处并没有考虑用户和物品的属性，如：用户年龄，性别，学历，工作等，物品价格，品类，外观等。</p><p>通过用户对物品的打分，可以建立一个推荐值矩阵，之后就可以通过运算该矩阵来预测用户喜好，即为矩阵分解算法！矩阵分解：将推荐值矩阵 R 分解为矩阵 U 和 矩阵 P，使得 U 和 P 的乘积得到的新矩阵 R* 中的元素与 R 中的已知元素的值非常接近，那么 R* 中对应于 R 中的未知元素的值就是预测值。</p><p>推荐值矩阵：</p><table><thead><tr><th></th><th>时间简史</th><th>万历三十年</th><th>大秦帝国</th><th>红楼梦</th><th>数学简史</th></tr></thead><tbody><tr><td>小明</td><td>1</td><td></td><td>4</td><td></td><td>1</td></tr><tr><td>小王</td><td></td><td>2</td><td></td><td>2</td><td>4</td></tr><tr><td>小李</td><td>4</td><td></td><td>1</td><td></td><td>4</td></tr><tr><td>小张</td><td></td><td>5</td><td>1</td><td>4</td><td></td></tr></tbody></table><p>推荐值矩阵关键性问题：</p><ol><li>初始值获取，数据的收集</li><li>从推荐值矩阵中已知数据预测未知数据</li><li>建立评价系统，用于检验推荐系统的效果</li></ol><h1>收集数据</h1><p>一般可以采取网络爬虫的方式，比如对于数据的评分，可以爬取豆瓣读书上的数据，也可以在自己可以控制的网站上做埋点等来收集用户信息。</p><h1>预测未知数据</h1><p>关键挑战：</p><ul><li><p>当用户和物品的数量都比较大时，推荐之矩阵通常会是一个稀疏矩阵（在矩阵中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵），说明大多数用户可能并没有对大多数物品表达喜好。</p></li><li><p>冷启动问题，是每一个推荐系统都需要面对的问题。</p></li></ul><p>矩阵分解实例：$$\begin{pmatrix}1 &amp; 3 &amp; 5 &amp; 4 \\&amp; 2  &amp;  &amp; 4 \\<br>3 &amp; 4 &amp; 3 &amp; &amp;  \\\end{pmatrix}<br>\approx\begin{pmatrix}-0.77 &amp; -1.84 \\-0.2 &amp; -1.85 \\<br>-1.98 &amp; -0.54 \\\end{pmatrix}\begin{pmatrix}-1.46 &amp; -1.67 &amp; -0.88 &amp; -0.32 \\0.04 &amp; -0.89 &amp; -2.3 &amp; -2.04 &amp;  \\\end{pmatrix}  \\=\begin{pmatrix}1.06 &amp; 2.93 &amp; 4.9 &amp; 4 \\0.21 &amp; 1.97 &amp; 4.41 &amp; 3.84 \\<br>2.88 &amp; 3.79 &amp; 2.98 &amp; 1.73 &amp;  \\\end{pmatrix}$$即：$$R \approx U * P^T = R^*$$对比最左侧的元素矩阵和最右侧的预测矩阵，预测矩阵中位于原始矩阵缺失数值位置的元素值，即为预测值。同时也可以得到$$R_{ij} \approx U_i * P_j = R^*_{ij}$$</p><p>即：对于在 ij 位置上的物品的喜好数据，可以通过第 i 个用户的画像向量和第 j 个物品的画像向量代表。使用图形表示如下：<img src="/2019/07/30/基于矩阵分解算法的推荐系统实战/1.png">其中 k 在数学上的意义为矩阵分解的秩，在业务上的意义为 影响用户给物品评分的 k 个影响因子，当前我们无法直接知道 k 的值，在模型训练时，一般采取交叉验证的方式来寻找最优的 k 值。</p><p>我们可以使用“和方差”来作为损失函数</p><p>$$min_{U,P}\sum_{i,j}1/2(R_{ij}-U_i \cdot P_j)^2$$</p><blockquote><p>这里通过已知的{(i，j),r(ij)，计算“和方差”，使之达到最小，即预测值越接近真实值。以此得出的 U 和 P 的值就是我们需要的值。</p></blockquote><h2>损失函数的梯度</h2><p>单独取出误差$$L_{ij} = 1/2(R_{ij} - U_i \cdot P_j)^2$$对误差 L 分别在 U 和 P 上求导可得$$\frac{\partial L_{ij}}{\partial U_i} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial U_i} = -P_j(R_{ij} - U_i \cdot P_j)$$</p><p>$$\frac{\partial L_{ij}}{\partial P_j} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial P_j} = -U_i(R_{ij} - U_i \cdot P_j)$$</p><p>现在我们已经知道了损失函数的梯度（导数），下面就可以使用梯度下降法来求解 U 和 P 的值。</p><p><strong>梯度下降法</strong><img src="/2019/07/30/基于矩阵分解算法的推荐系统实战/2.png">随机选取一个起始点，然后在负梯度的方向上持续训练，直到损失函数的梯度越来越接近零，此时即可取得最优解。</p><h2>引入正则化</h2><p>为了防止过拟合的发生，对损失函数加入正则化参数$$λ[\sum_{i=1}^m|U_i|^2 + \sum_{i=1}^n|P_i|^2]$$λ&gt;0</p><blockquote><p>这样，当 U 和 P 都保证比较小的情况下，U 或者 P 的数值剧烈变化时，U 和 P 的点积也不会有太大的变化。</p></blockquote><p>最终的损失函数为：$$min_{U,P}\sum_{i,j}1/2(R_{ij}-U_i \cdot P_j)^2 + λ[\sum_{i=1}^m|U_i|^2 + \sum_{i=1}^n|P_i|^2]$$最终损失函数的梯度为：$$\frac{\partial L_{ij}}{\partial U_i} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial U_i} = -P_j(R_{ij} - U_i \cdot P_j) + λU_i$$</p><p>$$\frac{\partial L_{ij}}{\partial P_j} = \frac{\partial 1/2(R_{ij} - U_i \cdot P_j)^2}{\partial P_j} = -U_i(R_{ij} - U_i \cdot P_j) + λP_j$$</p><h2>运用梯度下降法求最优解</h2><p>设定梯度下降的速率 γ（学习速率）和 k 值，并随机初始化 U 和 P，重复训练，直到误差满意为止。$$U_i = U_i - γ\frac{\partial L_{ij}}{\partial U_i}$$</p><p>$$P_j = P_j - γ\frac{\partial L_{ij}}{\partial P_j}$$</p><h1>评估推荐系统</h1><ul><li>最基本的就是，通过训练集训练模型，通过测试集测试模型，如果模型在测试集上的表现达到我们的预期，则该模型可以上线部署。一般采用平均绝对离差来验证模型预测值的好坏$$M_d = 1/n\sum|r_{up} - r^*_{up}|$$</li></ul><blockquote><p>n: 测试集中推荐值的总数量</p><p>r(up): 真实的用户 u 对物品 p 的推荐值</p><p>r*(up): 预测的用户 u 对物品 p 的推荐值</p></blockquote><ul><li>在线的 A/B 测试</li></ul><h1>项目实战</h1><p>数据集格式如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="number">1119</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">167</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">6265</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">1440</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">1427</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">5404</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">259</span><span class="number">7.000000</span></span><br><span class="line"><span class="number">1</span><span class="number">4156</span><span class="number">8.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">419</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">415</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">2834</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">228</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">107</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">440</span><span class="number">9.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">44</span><span class="number">10.000000</span></span><br><span class="line"><span class="number">2</span><span class="number">455</span><span class="number">10.000000</span></span><br></pre></td></tr></table></figure></p><blockquote><p>第一列为用户 ID，第二列为物品 ID，第三列为对应的打分（1-10）</p></blockquote><p>总体代码基于 surprise 库，可以先安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scikit-surprise</span><br></pre></td></tr></table></figure></p><p>下面导入相关库和数据集</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> surprise</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> BaselineOnly</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> Reader</span><br><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> accuracy</span><br><span class="line"><span class="keyword">from</span> surprise.model_selection <span class="keyword">import</span> cross_validate</span><br><span class="line"><span class="keyword">from</span> surprise.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reader = Reader(line_format=<span class="string">'user item rating'</span>, sep=<span class="string">'\t'</span>, rating_scale=(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">data = Dataset.load_from_file(<span class="string">'book_ratings.dat.txt'</span>, reader=reader)</span><br><span class="line"><span class="comment"># 将数据随机分为训练和测试数据集</span></span><br><span class="line">trainset, testset = train_test_split(data, test_size=<span class="number">.25</span>)</span><br></pre></td></tr></table></figure></p><p>根据公式，定义算法函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatrixFactorization</span><span class="params">(surprise.AlgoBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lr, n_epochs, n_factors, lmd)</span>:</span></span><br><span class="line">        self.lr = lr  <span class="comment"># 梯度下降法的学习速率</span></span><br><span class="line">        self.n_epochs = n_epochs  <span class="comment"># 梯度下降法的迭代次数</span></span><br><span class="line">        self.n_factors = n_factors  <span class="comment"># 分解的矩阵的秩，即影响用户打分的隐藏因子</span></span><br><span class="line">        self.lmd = lmd  <span class="comment"># 正则化参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, trainset)</span>:</span></span><br><span class="line">        print(<span class="string">"Fitting data..."</span>)</span><br><span class="line">        <span class="comment"># 随机初始化 u 和 p 矩阵</span></span><br><span class="line">        u = np.random.normal(<span class="number">0</span>, <span class="number">.1</span>, (trainset.n_users, self.n_factors))  <span class="comment"># 均值为0，方差为0.1，（行数，列数）</span></span><br><span class="line">        p = np.random.normal(<span class="number">0</span>, <span class="number">.1</span>, (trainset.n_items, self.n_factors))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 梯度下降法</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.n_epochs):</span><br><span class="line">            print(<span class="string">"Round:"</span>, _)</span><br><span class="line">            <span class="keyword">for</span> i, j, r_ij <span class="keyword">in</span> trainset.all_ratings():</span><br><span class="line">                <span class="comment"># 这里就是套用上面得到的公式</span></span><br><span class="line">                <span class="comment"># u_old[i] = u[i]</span></span><br><span class="line">                err = r_ij - np.dot(u[i], p[j])</span><br><span class="line">                u[i] -= -self.lr * err * p[j] + self.lr * self.lmd * u[i]</span><br><span class="line">                p[j] -= -self.lr * err * u[i] + self.lr * self.lmd * p[j]</span><br><span class="line">        </span><br><span class="line">        self.u, self.p = u, p</span><br><span class="line">        self.trainset = trainset</span><br><span class="line">        print(<span class="string">"End fitting!"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">estimate</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.trainset.knows_user(i) <span class="keyword">and</span> self.trainset.knows_item(j):</span><br><span class="line">            <span class="keyword">return</span> np.dot(self.u[i], self.p[j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.trainset.global_mean  <span class="comment"># 返回平均值</span></span><br></pre></td></tr></table></figure></p><p>最后再训练、预测，评估<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">algo = MatrixFactorization(<span class="number">0.005</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">0.2</span>)</span><br><span class="line">algo.fit(trainset)</span><br><span class="line">predictions = algo.test(testset)</span><br><span class="line">accuracy.mae(predictions)</span><br></pre></td></tr></table></figure></p><blockquote><p>可以调整学习速率，迭代次数，隐藏因子个数和正则化参数等来训练不同的模型，并评估结果，获取满意的模型。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/30/基于矩阵分解算法的推荐系统实战/jiqixuexi.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于矩阵分解算法的图书推荐系统实战&lt;/p&gt;
&lt;h1&gt;推荐系统&lt;/h1&gt;
&lt;p&gt;推荐系统，可以根据用户的喜好来推荐给用户不同的事物。&lt;/p&gt;
&lt;p&gt;推荐系统类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;纯手工设置推荐内容&lt;/li&gt;
&lt;li&gt;根据物品的销量，曝光率等来排序物品，并推荐给用户&lt;/li&gt;
&lt;li&gt;根据不同的算法，整合不同维度的数据，来智能的推荐物品&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;简单的推荐系统模型&lt;/h2&gt;
&lt;p&gt;设：
U 为所有用户集合
P 为所有物品集合
R 为用户对物品的喜好程度
模型 Model(R) = U * P
算法核心：&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://blog.luobodazahui.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://blog.luobodazahui.top/tags/Python/"/>
    
      <category term="机器学习" scheme="https://blog.luobodazahui.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>轻松玩转HTTPS</title>
    <link href="https://blog.luobodazahui.top/2019/07/30/%E8%BD%BB%E6%9D%BE%E7%8E%A9%E8%BD%ACHTTPS/"/>
    <id>https://blog.luobodazahui.top/2019/07/30/轻松玩转HTTPS/</id>
    <published>2019-07-30T01:22:22.000Z</published>
    <updated>2019-07-31T10:40:43.918Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/07/30/轻松玩转HTTPS/4.jpg"></p><p>今天分享一个非常给力的 SSL 证书生成网站，从此 HTTPS 不再是难事儿！</p><h1>Certbot</h1><p>不错，今天的主角就是给力的 Certbot，免费好用，真是我等 diaosi 的一大福音。</p><p>我们先打开其官网，整体浏览下</p><blockquote><p>https://certbot.eff.org/lets-encrypt/centos6-nginx</p></blockquote><p>我们可以看到，想使用 Certbot，需要一些条件</p><p><img src="/2019/07/30/轻松玩转HTTPS/1.png"></p><ol><li><p>需要一个命令行服务器，一般就是 linux了。我这里使用的是 CentOS6</p></li><li><p>我们需要已经部署了一个 http 服务，80 端口是监听状态的，我使用的是 Nginx 代理。</p></li><li><p>有执行 root 权限的用户。</p><p><a id="more"></a></p></li></ol><h1>具体安装</h1><p>在使用官网上的安装步骤前，我们要先有 Nginx，并且已经成功启动，当然也要有绑定了公网 IP 的域名，因为 SSL 证书都是要绑定到具体域名的。公网 IP，域名申请，Nginx 安装等，就不说啦，我们现在来看一下我这里 Nginx 的简单配置。</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  www.kungfuworld.top;</span><br><span class="line">    ssl on;</span><br><span class="line">    root        /home/KungFuWorld/      ;</span><br><span class="line">    access_log  /home/log/access.log;</span><br><span class="line">    error_log   /home/log/error.log;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:5000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name kungfuworld.top;</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我配置的域名是 www.kungfuworld.top，后面在执行 Certbot 安装时，会自动扫描到这里配置的域名，从而根据这个域名来生成证书。下面，就是一步步的安装官网的步骤来操作就好了</p><h2>安装 Certbot</h2><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line">sudo mv certbot-auto /usr/local/bin/certbot-auto</span><br><span class="line">sudo chown root /usr/local/bin/certbot-auto</span><br><span class="line">sudo chmod 0755 /usr/local/bin/certbot-auto</span><br></pre></td></tr></table></figure></p><h2>生成证书</h2><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/bin/certbot-auto certonly --nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>中间会有一些需要用户交互的步骤，按照提示操作就好</p></blockquote><h2>配置 Nginx</h2><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate /etc/letsencrypt/live/kungfuworld.top/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/kungfuworld.top/privkey.pem;</span><br></pre></td></tr></table></figure></p><p>在刚刚的 Nginx 配置文件中，增加上面的两条配置，就完成了证书的配置。</p><p>如果不出意外，该域名的 HTTPS 就可以访问了，而且是浏览器信任的证书。</p><p><img src="/2019/07/30/轻松玩转HTTPS/2.png"></p><h2>自动更新</h2><p>使用 Certbot 安装的证书，只有 90 天的有效期，还好其提供了方便的自动更新功能</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/certbot-auto renew</span><br></pre></td></tr></table></figure></p><p>我们可以创建一个 crontab 任务，来自动更新<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 4 */80 * * /usr/local/bin/certbot-auto renew &amp;&gt;&gt; /dev/null</span><br></pre></td></tr></table></figure></p><blockquote><p>每隔 80 天在凌晨 4 点执行一次 renew 操作</p></blockquote><p>至此，基于 Certbot 的 HTTPS 配置就完成了，可以开心的使用 HTTPS 喽。</p><p><img src="/2019/07/30/轻松玩转HTTPS/3.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/30/轻松玩转HTTPS/4.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天分享一个非常给力的 SSL 证书生成网站，从此 HTTPS 不再是难事儿！&lt;/p&gt;
&lt;h1&gt;Certbot&lt;/h1&gt;
&lt;p&gt;不错，今天的主角就是给力的 Certbot，免费好用，真是我等 diaosi 的一大福音。&lt;/p&gt;
&lt;p&gt;我们先打开其官网，整体浏览下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://certbot.eff.org/lets-encrypt/centos6-nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以看到，想使用 Certbot，需要一些条件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/30/轻松玩转HTTPS/1.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要一个命令行服务器，一般就是 linux了。我这里使用的是 CentOS6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们需要已经部署了一个 http 服务，80 端口是监听状态的，我使用的是 Nginx 代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有执行 root 权限的用户。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="系统" scheme="https://blog.luobodazahui.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="系统" scheme="https://blog.luobodazahui.top/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="shell" scheme="https://blog.luobodazahui.top/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>惊闻马大姐婚变，我连夜爬了微博评论，沦陷</title>
    <link href="https://blog.luobodazahui.top/2019/07/29/%E6%83%8A%E9%97%BB%E9%A9%AC%E5%A4%A7%E5%A7%90%E5%A9%9A%E5%8F%98%EF%BC%8C%E6%88%91%E8%BF%9E%E5%A4%9C%E7%88%AC%E4%BA%86%E5%BE%AE%E5%8D%9A%E8%AF%84%E8%AE%BA%EF%BC%8C%E6%B2%A6%E9%99%B7/"/>
    <id>https://blog.luobodazahui.top/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/</id>
    <published>2019-07-29T11:41:36.000Z</published>
    <updated>2019-07-31T10:40:10.633Z</updated>
    
    <content type="html"><![CDATA[<p></p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/pojing.jpg"></p><p>娱乐圈的瓜真的是一波又一波，这次又轮到文章和马伊琍了。他们具体为啥会婚变，咱也不知道，啥也不敢问，啥也不干说。不过他们微博下面还是开锅了，下面就一起来看看吧。</p><h1>微博页面分析</h1><p>首先我们先来看看微博页面，爬虫要从何处下手。</p><h2>页面分析</h2><p>我们直接进入到马伊琍微博的评论页面</p><p>https://weibo.com/1196235387/HFyy4wabF?filter=hot&amp;root_comment_id=0&amp;type=comment</p><p>可以看到页面如下：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/1.png"></p><p><a id="more"></a></p><p>然后我们使用 Chrome 的调试工具（F12），切换到 Network 页签，再次刷新页面，能够看到一条请求，如下：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/2.png"></p><p>先拷贝出这个请求 URL，放到 Postman 里试一试，如图：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/3.png"></p><p>这都是些神马啊</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/4.png" width="250" height="150"></p><p>果然没那么简单，看来有反爬在作怪，那么反反爬三板斧先用起来，headers 加一哈再来继续继续观察 Network 中的请求 headers，发现有一个 Cookie 是那么的长，拷贝出来添加上试试吧</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/5.png"></p><p>再次使用 Postman 调用</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/6.png"></p><p>哎呦，不错哦，有正常数据返回了</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/aiyou.jpg"></p><h2>URL 分析</h2><p>现在再来看看我们使用的 URL</p><p>https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;from=singleWeiBo&amp;__rnd=1564381638125，总共有4各参数，ajwvr、id、from 和 __rnd。</p><p><strong>1.精简 URL</strong></p><p>我们先从后往前一个一个的去掉每个参数试试，发现去掉后面两个，我们都可以获取到评论记录，那么后面两个参数我们就去掉它，现在的 URL 变为：</p><p>https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659</p><p><strong>2.增加 page 参数</strong></p><p>再次观察现在获取到的数据，发现返回的数据还有一个 page 的数据域，如下：</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/7.png"></p><p>而且当前是在 &quot;pagenum&quot;: 1 的，那么我们要怎么控制到不同的 page 页面呢，试着增加一个 page 参数到 URL 中，如：</p><p>https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;page=2</p><p>果然，真的访问到 page 2 了，是不是很香啊</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/8.png"></p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/zhengxiang.jpg"></p><p>至此，我们的页面分析就基本完成了，下面就是拿数据喽。</p><h1>获取并保存数据</h1><p>获取保存数据的部分就比较常规了，直接看代码</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'SINAGLOBAL=4979979695709.662.1540896279940; SUB=_2AkMrYbTuf8PxqwJRmPkVyG_nb45wwwHEieKdPUU1JRMxHRl-yT83qnI9tRB6AOGaAcavhZVIZBiCoxtgPDNVspj9jtju; SUBP=0033WrSXqPxfM72-Ws9jqgMF55529P9D9W5d4hHnVEbZCn4G2L775Qe1; _s_tentry=-; Apache=1711120851984.973.1564019682028; ULV=1564019682040:7:2:1:1711120851984.973.1564019682028:1563525180101; login_sid_t=8e1b73050dedb94d4996a67f8d74e464; cross_origin_proto=SSL; Ugrow-G0=140ad66ad7317901fc818d7fd7743564; YF-V5-G0=95d69db6bf5dfdb71f82a9b7f3eb261a; WBStorage=edfd723f2928ec64|undefined; UOR=bbs.51testing.com,widget.weibo.com,www.baidu.com; wb_view_log=1366*7681; WBtopGlobal_register_version=307744aa77dd5677; YF-Page-G0=580fe01acc9791e17cca20c5fa377d00|1564363890|1564363890'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mayili</span><span class="params">(page)</span>:</span></span><br><span class="line">    mayili = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, page):</span><br><span class="line">        print(<span class="string">"page: "</span>, i)</span><br><span class="line">        url = <span class="string">'https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;page=%s'</span> % int(i)</span><br><span class="line">        req = requests.get(url, headers=Headers).text</span><br><span class="line">        html = json.loads(req)[<span class="string">'data'</span>][<span class="string">'html'</span>]</span><br><span class="line">        content = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># comment = content.find_all('div', attrs=&#123;'class': 'list_li S_line1 clearfix'&#125;)</span></span><br><span class="line">        comment_text = content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'WB_text'</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> comment_text:</span><br><span class="line">            mayili_text = c.text.split(<span class="string">"："</span>)[<span class="number">1</span>]</span><br><span class="line">            mayili.append(mayili_text)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mayili</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wenzhang</span><span class="params">(page)</span>:</span></span><br><span class="line">    wenzhang = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, page):</span><br><span class="line">        print(<span class="string">"page: "</span>, i)</span><br><span class="line">        url = <span class="string">'https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042089738682&amp;page=%s'</span> % int(i)</span><br><span class="line">        req = requests.get(url, headers=Headers).text</span><br><span class="line">        html = json.loads(req)[<span class="string">'data'</span>][<span class="string">'html'</span>]</span><br><span class="line">        content = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># comment = content.find_all('div', attrs=&#123;'class': 'list_li S_line1 clearfix'&#125;)</span></span><br><span class="line">        comment_text = content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'WB_text'</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> comment_text:</span><br><span class="line">            wenzhang_text = c.text.split(<span class="string">"："</span>)[<span class="number">1</span>]</span><br><span class="line">            wenzhang.append(wenzhang_text)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wenzhang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start"</span>)</span><br><span class="line">    ma_comment = mayili(<span class="number">1001</span>)</span><br><span class="line">    mayili_pd = pd.DataFrame(columns=[<span class="string">'mayili_comment'</span>], data=ma_comment)</span><br><span class="line">    mayili_pd.to_csv(<span class="string">'mayili.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    wen_comment = wenzhang(<span class="number">1001</span>)</span><br><span class="line">    wenzhang_pd = pd.DataFrame(columns=[<span class="string">'wenzhang_comment'</span>], data=wen_comment)</span><br><span class="line">    wenzhang_pd.to_csv(<span class="string">'wenzhang.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p><p>总共 page 页面有 2000 多页，要爬完还真是需要一段时间，我这里配置了 1000，应该是够了。</p><p>而且还做了 sleep 5 的操作，主要是因为如果爬取太快，会被微博视为异常请求，会被禁，而且也不会对人家的正常服务产生影响，毕竟盗亦有道嘛！</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/jilinggui.jpg" width="250" height="150"></p><h1>词云做成</h1><p>等爬虫跑完之后，我们简单看下数据的内容马伊琍微博评论</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/9.png"></p><p>文章微博评论</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/10.png"></p><p>数据都拿到了，下面就做成词云看看各路粉丝的态度吧这里就不对评论内容做过多置喙了，毕竟说多了都是错</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/jilinggui2.jpg" width="250" height="150"></p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordcloud_m</span><span class="params">()</span>:</span></span><br><span class="line">    df = pd.read_csv(<span class="string">'mayili.csv'</span>, usecols=[<span class="number">1</span>])</span><br><span class="line">    df_copy = df.copy()</span><br><span class="line">    df_copy[<span class="string">'mayili_comment'</span>] = df_copy[<span class="string">'mayili_comment'</span>].apply(<span class="keyword">lambda</span> x: str(x).split())  <span class="comment"># 去掉空格</span></span><br><span class="line">    df_list = df_copy.values.tolist()</span><br><span class="line">    comment = jieba.cut(str(df_list), cut_all=<span class="literal">False</span>)</span><br><span class="line">    words = <span class="string">' '</span>.join(comment)</span><br><span class="line">    wc = WordCloud(width=<span class="number">2000</span>, height=<span class="number">1800</span>, background_color=<span class="string">'white'</span>, font_path=font,</span><br><span class="line">                   stopwords=STOPWORDS, contour_width=<span class="number">3</span>, contour_color=<span class="string">'steelblue'</span>)</span><br><span class="line">    wc.generate(words)</span><br><span class="line">    wc.to_file(<span class="string">'m.png'</span>)</span><br></pre></td></tr></table></figure></p><p>马伊琍评论词云</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/m.png"></p><p>文章评论词云</p><p><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/w.png"></p><p>最后，我把所有的代码都上传到 GitHub 上了，需要的可以自取https://github.com/zhouwei713/data_analysis/tree/master/weibo_mayili_wenzhang</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/pojing.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;娱乐圈的瓜真的是一波又一波，这次又轮到文章和马伊琍了。他们具体为啥会婚变，咱也不知道，啥也不敢问，啥也不干说。不过他们微博下面还是开锅了，下面就一起来看看吧。&lt;/p&gt;
&lt;h1&gt;微博页面分析&lt;/h1&gt;
&lt;p&gt;首先我们先来看看微博页面，爬虫要从何处下手。&lt;/p&gt;
&lt;h2&gt;页面分析&lt;/h2&gt;
&lt;p&gt;我们直接进入到马伊琍微博的评论页面&lt;/p&gt;
&lt;p&gt;https://weibo.com/1196235387/HFyy4wabF?filter=hot&amp;amp;root_comment_id=0&amp;amp;type=comment&lt;/p&gt;
&lt;p&gt;可以看到页面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://blog.luobodazahui.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https://blog.luobodazahui.top/tags/Python/"/>
    
  </entry>
  
</feed>
