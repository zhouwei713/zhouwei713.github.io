<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luobodazahui</title>
  
  <subtitle>周萝卜的分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.luobodazahui.top/"/>
  <updated>2019-07-30T01:42:30.327Z</updated>
  <id>https://blog.luobodazahui.top/</id>
  
  <author>
    <name>Luobo Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>轻松玩转HTTPS</title>
    <link href="https://blog.luobodazahui.top/2019/07/30/%E8%BD%BB%E6%9D%BE%E7%8E%A9%E8%BD%ACHTTPS/"/>
    <id>https://blog.luobodazahui.top/2019/07/30/轻松玩转HTTPS/</id>
    <published>2019-07-30T01:22:22.000Z</published>
    <updated>2019-07-30T01:42:30.327Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/07/30/轻松玩转HTTPS/4.jpg"><p>今天分享一个非常给力的 SSL 证书生成网站，从此 HTTPS 不再是难事儿！</p><h1 id="Certbot"><a href="#Certbot" class="headerlink" title="Certbot"></a>Certbot</h1><p>不错，今天的主角就是给力的 Certbot，免费好用，真是我等 diaosi 的一大福音。</p><p>我们先打开其官网，整体浏览下</p><blockquote><p><a href="https://certbot.eff.org/lets-encrypt/centos6-nginx" target="_blank" rel="noopener">https://certbot.eff.org/lets-encrypt/centos6-nginx</a></p></blockquote><p>我们可以看到，想使用 Certbot，需要一些条件</p><img src="/2019/07/30/轻松玩转HTTPS/1.png"><ol><li><p>需要一个命令行服务器，一般就是 linux了。我这里使用的是 CentOS6</p></li><li><p>我们需要已经部署了一个 http 服务，80 端口是监听状态的，我使用的是 Nginx 代理。</p></li><li><p>有执行 root 权限的用户。</p><a id="more"></a></li></ol><h1 id="具体安装"><a href="#具体安装" class="headerlink" title="具体安装"></a>具体安装</h1><p>在使用官网上的安装步骤前，我们要先有 Nginx，并且已经成功启动，当然也要有绑定了公网 IP 的域名，因为 SSL 证书都是要绑定到具体域名的。<br>公网 IP，域名申请，Nginx 安装等，就不说啦，我们现在来看一下我这里 Nginx 的简单配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  www.kungfuworld.top;</span><br><span class="line">    ssl on;</span><br><span class="line">    root        /home/KungFuWorld/      ;</span><br><span class="line">    access_log  /home/log/access.log;</span><br><span class="line">    error_log   /home/log/error.log;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:5000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name kungfuworld.top;</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我配置的域名是 <a href="http://www.kungfuworld.top，后面在执行" target="_blank" rel="noopener">www.kungfuworld.top，后面在执行</a> Certbot 安装时，会自动扫描到这里配置的域名，从而根据这个域名来生成证书。<br>下面，就是一步步的安装官网的步骤来操作就好了</p><h2 id="安装-Certbot"><a href="#安装-Certbot" class="headerlink" title="安装 Certbot"></a>安装 Certbot</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line">sudo mv certbot-auto /usr/local/bin/certbot-auto</span><br><span class="line">sudo chown root /usr/local/bin/certbot-auto</span><br><span class="line">sudo chmod 0755 /usr/local/bin/certbot-auto</span><br></pre></td></tr></table></figure><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/bin/certbot-auto certonly --nginx</span><br></pre></td></tr></table></figure><blockquote><p>中间会有一些需要用户交互的步骤，按照提示操作就好</p></blockquote><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate /etc/letsencrypt/live/kungfuworld.top/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/kungfuworld.top/privkey.pem;</span><br></pre></td></tr></table></figure><p>在刚刚的 Nginx 配置文件中，增加上面的两条配置，就完成了证书的配置。</p><p>如果不出意外，该域名的 HTTPS 就可以访问了，而且是浏览器信任的证书。</p><img src="/2019/07/30/轻松玩转HTTPS/2.png"><h2 id="自动更新"><a href="#自动更新" class="headerlink" title="自动更新"></a>自动更新</h2><p>使用 Certbot 安装的证书，只有 90 天的有效期，还好其提供了方便的自动更新功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/certbot-auto renew</span><br></pre></td></tr></table></figure><p>我们可以创建一个 crontab 任务，来自动更新<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 4 */80 * * /usr/local/bin/certbot-auto renew &amp;&gt;&gt; /dev/null</span><br></pre></td></tr></table></figure></p><blockquote><p>每隔 80 天在凌晨 4 点执行一次 renew 操作</p></blockquote><p>至此，基于 Certbot 的 HTTPS 配置就完成了，可以开心的使用 HTTPS 喽。</p><img src="/2019/07/30/轻松玩转HTTPS/3.jpg">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/07/30/轻松玩转HTTPS/4.jpg&quot;&gt;
&lt;p&gt;今天分享一个非常给力的 SSL 证书生成网站，从此 HTTPS 不再是难事儿！&lt;/p&gt;
&lt;h1 id=&quot;Certbot&quot;&gt;&lt;a href=&quot;#Certbot&quot; class=&quot;headerlink&quot; title=&quot;Certbot&quot;&gt;&lt;/a&gt;Certbot&lt;/h1&gt;&lt;p&gt;不错，今天的主角就是给力的 Certbot，免费好用，真是我等 diaosi 的一大福音。&lt;/p&gt;
&lt;p&gt;我们先打开其官网，整体浏览下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://certbot.eff.org/lets-encrypt/centos6-nginx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://certbot.eff.org/lets-encrypt/centos6-nginx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以看到，想使用 Certbot，需要一些条件&lt;/p&gt;
&lt;img src=&quot;/2019/07/30/轻松玩转HTTPS/1.png&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;需要一个命令行服务器，一般就是 linux了。我这里使用的是 CentOS6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们需要已经部署了一个 http 服务，80 端口是监听状态的，我使用的是 Nginx 代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有执行 root 权限的用户。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>惊闻马大姐婚变，我连夜爬了微博评论，沦陷</title>
    <link href="https://blog.luobodazahui.top/2019/07/29/%E6%83%8A%E9%97%BB%E9%A9%AC%E5%A4%A7%E5%A7%90%E5%A9%9A%E5%8F%98%EF%BC%8C%E6%88%91%E8%BF%9E%E5%A4%9C%E7%88%AC%E4%BA%86%E5%BE%AE%E5%8D%9A%E8%AF%84%E8%AE%BA%EF%BC%8C%E6%B2%A6%E9%99%B7/"/>
    <id>https://blog.luobodazahui.top/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/</id>
    <published>2019-07-29T11:41:36.000Z</published>
    <updated>2019-07-30T01:52:50.565Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/4.png" width="200" height="100"><img src="/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/pojing.jpg"><p>娱乐圈的瓜真的是一波又一波，这次又轮到文章和马伊琍了。他们具体为啥会婚变，咱也不知道，啥也不敢问，啥也不干说。不过他们微博下面还是开锅了，下面就一起来看看吧。</p><h1 id="微博页面分析"><a href="#微博页面分析" class="headerlink" title="微博页面分析"></a>微博页面分析</h1><p>首先我们先来看看微博页面，爬虫要从何处下手。</p><h2 id="页面分析"><a href="#页面分析" class="headerlink" title="页面分析"></a>页面分析</h2><p>我们直接进入到马伊琍微博的评论页面</p><p><a href="https://weibo.com/1196235387/HFyy4wabF?filter=hot&amp;root_comment_id=0&amp;type=comment" target="_blank" rel="noopener">https://weibo.com/1196235387/HFyy4wabF?filter=hot&amp;root_comment_id=0&amp;type=comment</a></p><p>可以看到页面如下：</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/1.png" alt></p><a id="more"></a><p>然后我们使用 Chrome 的调试工具（F12），切换到 Network 页签，再次刷新页面，能够看到一条请求，如下：</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/2.png" alt></p><p>先拷贝出这个请求 URL，放到 Postman 里试一试，如图：</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/3.png" alt></p><p>这都是些神马啊</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/4.png" alt></p><p>果然没那么简单，看来有反爬在作怪，那么反反爬三板斧先用起来，headers 加一哈<br>再来继续继续观察 Network 中的请求 headers，发现有一个 Cookie 是那么的长，拷贝出来添加上试试吧</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/5.png" alt></p><p>再次使用 Postman 调用</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/6.png" alt></p><p>哎呦，不错哦，有正常数据返回了</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/aiyou.jpg" alt></p><h2 id="URL-分析"><a href="#URL-分析" class="headerlink" title="URL 分析"></a>URL 分析</h2><p>现在再来看看我们使用的 URL</p><p><a href="https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;from=singleWeiBo&amp;__rnd=1564381638125，总共有4各参数，ajwvr、id、from" target="_blank" rel="noopener">https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;from=singleWeiBo&amp;__rnd=1564381638125，总共有4各参数，ajwvr、id、from</a> 和 __rnd。</p><p><strong>1.精简 URL</strong></p><p>我们先从后往前一个一个的去掉每个参数试试，发现去掉后面两个，我们都可以获取到评论记录，那么后面两个参数我们就去掉它，现在的 URL 变为：</p><p><a href="https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659" target="_blank" rel="noopener">https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659</a></p><p><strong>2.增加 page 参数</strong></p><p>再次观察现在获取到的数据，发现返回的数据还有一个 page 的数据域，如下：</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/7.png" alt></p><p>而且当前是在 “pagenum”: 1 的，那么我们要怎么控制到不同的 page 页面呢，试着增加一个 page 参数到 URL 中，如：</p><p><a href="https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;page=2" target="_blank" rel="noopener">https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;page=2</a></p><p>果然，真的访问到 page 2 了，是不是很香啊</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/8.png" alt></p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/zhengxiang.jpg" alt></p><p>至此，我们的页面分析就基本完成了，下面就是拿数据喽。</p><h1 id="获取并保存数据"><a href="#获取并保存数据" class="headerlink" title="获取并保存数据"></a>获取并保存数据</h1><p>获取保存数据的部分就比较常规了，直接看代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'SINAGLOBAL=4979979695709.662.1540896279940; SUB=_2AkMrYbTuf8PxqwJRmPkVyG_nb45wwwHEieKdPUU1JRMxHRl-yT83qnI9tRB6AOGaAcavhZVIZBiCoxtgPDNVspj9jtju; SUBP=0033WrSXqPxfM72-Ws9jqgMF55529P9D9W5d4hHnVEbZCn4G2L775Qe1; _s_tentry=-; Apache=1711120851984.973.1564019682028; ULV=1564019682040:7:2:1:1711120851984.973.1564019682028:1563525180101; login_sid_t=8e1b73050dedb94d4996a67f8d74e464; cross_origin_proto=SSL; Ugrow-G0=140ad66ad7317901fc818d7fd7743564; YF-V5-G0=95d69db6bf5dfdb71f82a9b7f3eb261a; WBStorage=edfd723f2928ec64|undefined; UOR=bbs.51testing.com,widget.weibo.com,www.baidu.com; wb_view_log=1366*7681; WBtopGlobal_register_version=307744aa77dd5677; YF-Page-G0=580fe01acc9791e17cca20c5fa377d00|1564363890|1564363890'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mayili</span><span class="params">(page)</span>:</span></span><br><span class="line">    mayili = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, page):</span><br><span class="line">        print(<span class="string">"page: "</span>, i)</span><br><span class="line">        url = <span class="string">'https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042567665659&amp;page=%s'</span> % int(i)</span><br><span class="line">        req = requests.get(url, headers=Headers).text</span><br><span class="line">        html = json.loads(req)[<span class="string">'data'</span>][<span class="string">'html'</span>]</span><br><span class="line">        content = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># comment = content.find_all('div', attrs=&#123;'class': 'list_li S_line1 clearfix'&#125;)</span></span><br><span class="line">        comment_text = content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'WB_text'</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> comment_text:</span><br><span class="line">            mayili_text = c.text.split(<span class="string">"："</span>)[<span class="number">1</span>]</span><br><span class="line">            mayili.append(mayili_text)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mayili</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wenzhang</span><span class="params">(page)</span>:</span></span><br><span class="line">    wenzhang = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, page):</span><br><span class="line">        print(<span class="string">"page: "</span>, i)</span><br><span class="line">        url = <span class="string">'https://weibo.com/aj/v6/comment/big?ajwvr=6&amp;id=4399042089738682&amp;page=%s'</span> % int(i)</span><br><span class="line">        req = requests.get(url, headers=Headers).text</span><br><span class="line">        html = json.loads(req)[<span class="string">'data'</span>][<span class="string">'html'</span>]</span><br><span class="line">        content = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># comment = content.find_all('div', attrs=&#123;'class': 'list_li S_line1 clearfix'&#125;)</span></span><br><span class="line">        comment_text = content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'WB_text'</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> comment_text:</span><br><span class="line">            wenzhang_text = c.text.split(<span class="string">"："</span>)[<span class="number">1</span>]</span><br><span class="line">            wenzhang.append(wenzhang_text)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wenzhang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start"</span>)</span><br><span class="line">    ma_comment = mayili(<span class="number">1001</span>)</span><br><span class="line">    mayili_pd = pd.DataFrame(columns=[<span class="string">'mayili_comment'</span>], data=ma_comment)</span><br><span class="line">    mayili_pd.to_csv(<span class="string">'mayili.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    wen_comment = wenzhang(<span class="number">1001</span>)</span><br><span class="line">    wenzhang_pd = pd.DataFrame(columns=[<span class="string">'wenzhang_comment'</span>], data=wen_comment)</span><br><span class="line">    wenzhang_pd.to_csv(<span class="string">'wenzhang.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>总共 page 页面有 2000 多页，要爬完还真是需要一段时间，我这里配置了 1000，应该是够了。</p><p>而且还做了 sleep 5 的操作，主要是因为如果爬取太快，会被微博视为异常请求，会被禁，而且也不会对人家的正常服务产生影响，毕竟盗亦有道嘛！</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/jilinggui.jpg" alt></p><h1 id="词云做成"><a href="#词云做成" class="headerlink" title="词云做成"></a>词云做成</h1><p>等爬虫跑完之后，我们简单看下数据的内容<br>马伊琍微博评论</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/9.png" alt></p><p>文章微博评论</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/10.png" alt></p><p>数据都拿到了，下面就做成词云看看各路粉丝的态度吧<br>这里就不对评论内容做过多置喙了，毕竟说多了都是错</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/jilinggui2.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordcloud_m</span><span class="params">()</span>:</span></span><br><span class="line">    df = pd.read_csv(<span class="string">'mayili.csv'</span>, usecols=[<span class="number">1</span>])</span><br><span class="line">    df_copy = df.copy()</span><br><span class="line">    df_copy[<span class="string">'mayili_comment'</span>] = df_copy[<span class="string">'mayili_comment'</span>].apply(<span class="keyword">lambda</span> x: str(x).split())  <span class="comment"># 去掉空格</span></span><br><span class="line">    df_list = df_copy.values.tolist()</span><br><span class="line">    comment = jieba.cut(str(df_list), cut_all=<span class="literal">False</span>)</span><br><span class="line">    words = <span class="string">' '</span>.join(comment)</span><br><span class="line">    wc = WordCloud(width=<span class="number">2000</span>, height=<span class="number">1800</span>, background_color=<span class="string">'white'</span>, font_path=font,</span><br><span class="line">                   stopwords=STOPWORDS, contour_width=<span class="number">3</span>, contour_color=<span class="string">'steelblue'</span>)</span><br><span class="line">    wc.generate(words)</span><br><span class="line">    wc.to_file(<span class="string">'m.png'</span>)</span><br></pre></td></tr></table></figure><p>马伊琍评论词云</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/m.png" alt></p><p>文章评论词云</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/w.png" alt></p><p>最后，我把所有的代码都上传到 GitHub 上了，需要的可以自取<br><a href="https://github.com/zhouwei713/data_analysis/tree/master/weibo_mayili_wenzhang" target="_blank" rel="noopener">https://github.com/zhouwei713/data_analysis/tree/master/weibo_mayili_wenzhang</a></p><p><a id="jump_10"></a></p><p>下面的是我的公众号二维码图片，欢迎关注。</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/qrcode_for_gh_9b563c940a59_258.jpg" alt></p><p><a id="jump_20"></a></p><p>个人微信，加微信请注明来处。</p><p><img src="https://raw.githubusercontent.com/zhouwei713/BlogPic/master/wechatpay.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/4.png&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;
&lt;img src=&quot;/2019/07/29/惊闻马大姐婚变，我连夜爬了微博评论，沦陷/pojing.jpg&quot;&gt;
&lt;p&gt;娱乐圈的瓜真的是一波又一波，这次又轮到文章和马伊琍了。他们具体为啥会婚变，咱也不知道，啥也不敢问，啥也不干说。不过他们微博下面还是开锅了，下面就一起来看看吧。&lt;/p&gt;
&lt;h1 id=&quot;微博页面分析&quot;&gt;&lt;a href=&quot;#微博页面分析&quot; class=&quot;headerlink&quot; title=&quot;微博页面分析&quot;&gt;&lt;/a&gt;微博页面分析&lt;/h1&gt;&lt;p&gt;首先我们先来看看微博页面，爬虫要从何处下手。&lt;/p&gt;
&lt;h2 id=&quot;页面分析&quot;&gt;&lt;a href=&quot;#页面分析&quot; class=&quot;headerlink&quot; title=&quot;页面分析&quot;&gt;&lt;/a&gt;页面分析&lt;/h2&gt;&lt;p&gt;我们直接进入到马伊琍微博的评论页面&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://weibo.com/1196235387/HFyy4wabF?filter=hot&amp;amp;root_comment_id=0&amp;amp;type=comment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://weibo.com/1196235387/HFyy4wabF?filter=hot&amp;amp;root_comment_id=0&amp;amp;type=comment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到页面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhouwei713/BlogPic/master/1.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
